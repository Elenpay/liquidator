// Code generated by MockGen. DO NOT EDIT.
// Source: provider/provider.go

// Package provider is a generated GoMock package.
package provider

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	looprpc "github.com/lightninglabs/loop/looprpc"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetSwapStatus mocks base method.
func (m *MockProvider) GetSwapStatus(arg0 context.Context, arg1 string, arg2 looprpc.SwapClientClient) (looprpc.SwapStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(looprpc.SwapStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwapStatus indicates an expected call of GetSwapStatus.
func (mr *MockProviderMockRecorder) GetSwapStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapStatus", reflect.TypeOf((*MockProvider)(nil).GetSwapStatus), arg0, arg1, arg2)
}

// MonitorSwap mocks base method.
func (m *MockProvider) MonitorSwap(arg0 context.Context, arg1 string, arg2 looprpc.SwapClientClient) (looprpc.SwapStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonitorSwap", arg0, arg1, arg2)
	ret0, _ := ret[0].(looprpc.SwapStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MonitorSwap indicates an expected call of MonitorSwap.
func (mr *MockProviderMockRecorder) MonitorSwap(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorSwap", reflect.TypeOf((*MockProvider)(nil).MonitorSwap), arg0, arg1, arg2)
}

// RequestReverseSubmarineSwap mocks base method.
func (m *MockProvider) RequestReverseSubmarineSwap(arg0 context.Context, arg1 ReverseSubmarineSwapRequest, arg2 looprpc.SwapClientClient) (ReverseSubmarineSwapResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReverseSubmarineSwap", arg0, arg1, arg2)
	ret0, _ := ret[0].(ReverseSubmarineSwapResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestReverseSubmarineSwap indicates an expected call of RequestReverseSubmarineSwap.
func (mr *MockProviderMockRecorder) RequestReverseSubmarineSwap(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReverseSubmarineSwap", reflect.TypeOf((*MockProvider)(nil).RequestReverseSubmarineSwap), arg0, arg1, arg2)
}

// RequestSubmarineSwap mocks base method.
func (m *MockProvider) RequestSubmarineSwap(arg0 context.Context, arg1 SubmarineSwapRequest, arg2 looprpc.SwapClientClient) (SubmarineSwapResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestSubmarineSwap", arg0, arg1, arg2)
	ret0, _ := ret[0].(SubmarineSwapResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestSubmarineSwap indicates an expected call of RequestSubmarineSwap.
func (mr *MockProviderMockRecorder) RequestSubmarineSwap(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestSubmarineSwap", reflect.TypeOf((*MockProvider)(nil).RequestSubmarineSwap), arg0, arg1, arg2)
}
