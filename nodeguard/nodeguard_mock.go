// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Elenpay/liquidator/nodeguard (interfaces: NodeGuardServiceClient)
//
// Generated by this command:
//
//	mockgen -destination ./nodeguard/nodeguard_mock.go -package nodeguard github.com/Elenpay/liquidator/nodeguard NodeGuardServiceClient
//

// Package nodeguard is a generated GoMock package.
package nodeguard

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockNodeGuardServiceClient is a mock of NodeGuardServiceClient interface.
type MockNodeGuardServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeGuardServiceClientMockRecorder
	isgomock struct{}
}

// MockNodeGuardServiceClientMockRecorder is the mock recorder for MockNodeGuardServiceClient.
type MockNodeGuardServiceClientMockRecorder struct {
	mock *MockNodeGuardServiceClient
}

// NewMockNodeGuardServiceClient creates a new mock instance.
func NewMockNodeGuardServiceClient(ctrl *gomock.Controller) *MockNodeGuardServiceClient {
	mock := &MockNodeGuardServiceClient{ctrl: ctrl}
	mock.recorder = &MockNodeGuardServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeGuardServiceClient) EXPECT() *MockNodeGuardServiceClientMockRecorder {
	return m.recorder
}

// AddLiquidityRule mocks base method.
func (m *MockNodeGuardServiceClient) AddLiquidityRule(ctx context.Context, in *AddLiquidityRuleRequest, opts ...grpc.CallOption) (*AddLiquidityRuleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLiquidityRule", varargs...)
	ret0, _ := ret[0].(*AddLiquidityRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLiquidityRule indicates an expected call of AddLiquidityRule.
func (mr *MockNodeGuardServiceClientMockRecorder) AddLiquidityRule(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLiquidityRule", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).AddLiquidityRule), varargs...)
}

// AddNode mocks base method.
func (m *MockNodeGuardServiceClient) AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*AddNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddNode", varargs...)
	ret0, _ := ret[0].(*AddNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNode indicates an expected call of AddNode.
func (mr *MockNodeGuardServiceClientMockRecorder) AddNode(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNode", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).AddNode), varargs...)
}

// AddTags mocks base method.
func (m *MockNodeGuardServiceClient) AddTags(ctx context.Context, in *AddTagsRequest, opts ...grpc.CallOption) (*AddTagsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTags", varargs...)
	ret0, _ := ret[0].(*AddTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTags indicates an expected call of AddTags.
func (mr *MockNodeGuardServiceClientMockRecorder) AddTags(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTags", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).AddTags), varargs...)
}

// CloseChannel mocks base method.
func (m *MockNodeGuardServiceClient) CloseChannel(ctx context.Context, in *CloseChannelRequest, opts ...grpc.CallOption) (*CloseChannelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CloseChannel", varargs...)
	ret0, _ := ret[0].(*CloseChannelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseChannel indicates an expected call of CloseChannel.
func (mr *MockNodeGuardServiceClientMockRecorder) CloseChannel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseChannel", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).CloseChannel), varargs...)
}

// GetAvailableUtxos mocks base method.
func (m *MockNodeGuardServiceClient) GetAvailableUtxos(ctx context.Context, in *GetAvailableUtxosRequest, opts ...grpc.CallOption) (*GetUtxosResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAvailableUtxos", varargs...)
	ret0, _ := ret[0].(*GetUtxosResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableUtxos indicates an expected call of GetAvailableUtxos.
func (mr *MockNodeGuardServiceClientMockRecorder) GetAvailableUtxos(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableUtxos", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).GetAvailableUtxos), varargs...)
}

// GetAvailableWallets mocks base method.
func (m *MockNodeGuardServiceClient) GetAvailableWallets(ctx context.Context, in *GetAvailableWalletsRequest, opts ...grpc.CallOption) (*GetAvailableWalletsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAvailableWallets", varargs...)
	ret0, _ := ret[0].(*GetAvailableWalletsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableWallets indicates an expected call of GetAvailableWallets.
func (mr *MockNodeGuardServiceClientMockRecorder) GetAvailableWallets(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableWallets", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).GetAvailableWallets), varargs...)
}

// GetChannel mocks base method.
func (m *MockNodeGuardServiceClient) GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChannel", varargs...)
	ret0, _ := ret[0].(*GetChannelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockNodeGuardServiceClientMockRecorder) GetChannel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).GetChannel), varargs...)
}

// GetChannelOperationRequest mocks base method.
func (m *MockNodeGuardServiceClient) GetChannelOperationRequest(ctx context.Context, in *GetChannelOperationRequestRequest, opts ...grpc.CallOption) (*GetChannelOperationRequestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChannelOperationRequest", varargs...)
	ret0, _ := ret[0].(*GetChannelOperationRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelOperationRequest indicates an expected call of GetChannelOperationRequest.
func (mr *MockNodeGuardServiceClientMockRecorder) GetChannelOperationRequest(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelOperationRequest", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).GetChannelOperationRequest), varargs...)
}

// GetLiquidityRules mocks base method.
func (m *MockNodeGuardServiceClient) GetLiquidityRules(ctx context.Context, in *GetLiquidityRulesRequest, opts ...grpc.CallOption) (*GetLiquidityRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLiquidityRules", varargs...)
	ret0, _ := ret[0].(*GetLiquidityRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiquidityRules indicates an expected call of GetLiquidityRules.
func (mr *MockNodeGuardServiceClientMockRecorder) GetLiquidityRules(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiquidityRules", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).GetLiquidityRules), varargs...)
}

// GetNewWalletAddress mocks base method.
func (m *MockNodeGuardServiceClient) GetNewWalletAddress(ctx context.Context, in *GetNewWalletAddressRequest, opts ...grpc.CallOption) (*GetNewWalletAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNewWalletAddress", varargs...)
	ret0, _ := ret[0].(*GetNewWalletAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewWalletAddress indicates an expected call of GetNewWalletAddress.
func (mr *MockNodeGuardServiceClientMockRecorder) GetNewWalletAddress(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewWalletAddress", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).GetNewWalletAddress), varargs...)
}

// GetNodes mocks base method.
func (m *MockNodeGuardServiceClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodes", varargs...)
	ret0, _ := ret[0].(*GetNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes.
func (mr *MockNodeGuardServiceClientMockRecorder) GetNodes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).GetNodes), varargs...)
}

// GetUtxos mocks base method.
func (m *MockNodeGuardServiceClient) GetUtxos(ctx context.Context, in *GetUtxosRequest, opts ...grpc.CallOption) (*GetUtxosResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUtxos", varargs...)
	ret0, _ := ret[0].(*GetUtxosResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUtxos indicates an expected call of GetUtxos.
func (mr *MockNodeGuardServiceClientMockRecorder) GetUtxos(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUtxos", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).GetUtxos), varargs...)
}

// GetWalletBalance mocks base method.
func (m *MockNodeGuardServiceClient) GetWalletBalance(ctx context.Context, in *GetWalletBalanceRequest, opts ...grpc.CallOption) (*GetWalletBalanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWalletBalance", varargs...)
	ret0, _ := ret[0].(*GetWalletBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletBalance indicates an expected call of GetWalletBalance.
func (mr *MockNodeGuardServiceClientMockRecorder) GetWalletBalance(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalance", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).GetWalletBalance), varargs...)
}

// GetWithdrawalsRequestStatus mocks base method.
func (m *MockNodeGuardServiceClient) GetWithdrawalsRequestStatus(ctx context.Context, in *GetWithdrawalsRequestStatusRequest, opts ...grpc.CallOption) (*GetWithdrawalsRequestStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithdrawalsRequestStatus", varargs...)
	ret0, _ := ret[0].(*GetWithdrawalsRequestStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsRequestStatus indicates an expected call of GetWithdrawalsRequestStatus.
func (mr *MockNodeGuardServiceClientMockRecorder) GetWithdrawalsRequestStatus(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsRequestStatus", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).GetWithdrawalsRequestStatus), varargs...)
}

// GetWithdrawalsRequestStatusByReferenceIds mocks base method.
func (m *MockNodeGuardServiceClient) GetWithdrawalsRequestStatusByReferenceIds(ctx context.Context, in *GetWithdrawalsRequestStatusByReferenceIdsRequest, opts ...grpc.CallOption) (*GetWithdrawalsRequestStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithdrawalsRequestStatusByReferenceIds", varargs...)
	ret0, _ := ret[0].(*GetWithdrawalsRequestStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsRequestStatusByReferenceIds indicates an expected call of GetWithdrawalsRequestStatusByReferenceIds.
func (mr *MockNodeGuardServiceClientMockRecorder) GetWithdrawalsRequestStatusByReferenceIds(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsRequestStatusByReferenceIds", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).GetWithdrawalsRequestStatusByReferenceIds), varargs...)
}

// OpenChannel mocks base method.
func (m *MockNodeGuardServiceClient) OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OpenChannel", varargs...)
	ret0, _ := ret[0].(*OpenChannelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenChannel indicates an expected call of OpenChannel.
func (mr *MockNodeGuardServiceClientMockRecorder) OpenChannel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenChannel", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).OpenChannel), varargs...)
}

// RequestWithdrawal mocks base method.
func (m *MockNodeGuardServiceClient) RequestWithdrawal(ctx context.Context, in *RequestWithdrawalRequest, opts ...grpc.CallOption) (*RequestWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestWithdrawal", varargs...)
	ret0, _ := ret[0].(*RequestWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestWithdrawal indicates an expected call of RequestWithdrawal.
func (mr *MockNodeGuardServiceClientMockRecorder) RequestWithdrawal(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithdrawal", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).RequestWithdrawal), varargs...)
}
