// Code generated by MockGen. DO NOT EDIT.
// Source: nodeguard/nodeguard_grpc.pb.go

// Package nodeguard is a generated GoMock package.
package nodeguard

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockNodeGuardServiceClient is a mock of NodeGuardServiceClient interface.
type MockNodeGuardServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeGuardServiceClientMockRecorder
}

// MockNodeGuardServiceClientMockRecorder is the mock recorder for MockNodeGuardServiceClient.
type MockNodeGuardServiceClientMockRecorder struct {
	mock *MockNodeGuardServiceClient
}

// NewMockNodeGuardServiceClient creates a new mock instance.
func NewMockNodeGuardServiceClient(ctrl *gomock.Controller) *MockNodeGuardServiceClient {
	mock := &MockNodeGuardServiceClient{ctrl: ctrl}
	mock.recorder = &MockNodeGuardServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeGuardServiceClient) EXPECT() *MockNodeGuardServiceClientMockRecorder {
	return m.recorder
}

// GetLiquidityRules mocks base method.
func (m *MockNodeGuardServiceClient) GetLiquidityRules(ctx context.Context, in *GetLiquidityRulesRequest, opts ...grpc.CallOption) (*GetLiquidityRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLiquidityRules", varargs...)
	ret0, _ := ret[0].(*GetLiquidityRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiquidityRules indicates an expected call of GetLiquidityRules.
func (mr *MockNodeGuardServiceClientMockRecorder) GetLiquidityRules(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiquidityRules", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).GetLiquidityRules), varargs...)
}

// GetNewWalletAddress mocks base method.
func (m *MockNodeGuardServiceClient) GetNewWalletAddress(ctx context.Context, in *GetNewWalletAddressRequest, opts ...grpc.CallOption) (*GetNewWalletAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNewWalletAddress", varargs...)
	ret0, _ := ret[0].(*GetNewWalletAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewWalletAddress indicates an expected call of GetNewWalletAddress.
func (mr *MockNodeGuardServiceClientMockRecorder) GetNewWalletAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewWalletAddress", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).GetNewWalletAddress), varargs...)
}

// RequestWithdrawal mocks base method.
func (m *MockNodeGuardServiceClient) RequestWithdrawal(ctx context.Context, in *RequestWithdrawalRequest, opts ...grpc.CallOption) (*RequestWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestWithdrawal", varargs...)
	ret0, _ := ret[0].(*RequestWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestWithdrawal indicates an expected call of RequestWithdrawal.
func (mr *MockNodeGuardServiceClientMockRecorder) RequestWithdrawal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithdrawal", reflect.TypeOf((*MockNodeGuardServiceClient)(nil).RequestWithdrawal), varargs...)
}

// MockNodeGuardServiceServer is a mock of NodeGuardServiceServer interface.
type MockNodeGuardServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockNodeGuardServiceServerMockRecorder
}

// MockNodeGuardServiceServerMockRecorder is the mock recorder for MockNodeGuardServiceServer.
type MockNodeGuardServiceServerMockRecorder struct {
	mock *MockNodeGuardServiceServer
}

// NewMockNodeGuardServiceServer creates a new mock instance.
func NewMockNodeGuardServiceServer(ctrl *gomock.Controller) *MockNodeGuardServiceServer {
	mock := &MockNodeGuardServiceServer{ctrl: ctrl}
	mock.recorder = &MockNodeGuardServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeGuardServiceServer) EXPECT() *MockNodeGuardServiceServerMockRecorder {
	return m.recorder
}

// GetLiquidityRules mocks base method.
func (m *MockNodeGuardServiceServer) GetLiquidityRules(arg0 context.Context, arg1 *GetLiquidityRulesRequest) (*GetLiquidityRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiquidityRules", arg0, arg1)
	ret0, _ := ret[0].(*GetLiquidityRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiquidityRules indicates an expected call of GetLiquidityRules.
func (mr *MockNodeGuardServiceServerMockRecorder) GetLiquidityRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiquidityRules", reflect.TypeOf((*MockNodeGuardServiceServer)(nil).GetLiquidityRules), arg0, arg1)
}

// GetNewWalletAddress mocks base method.
func (m *MockNodeGuardServiceServer) GetNewWalletAddress(arg0 context.Context, arg1 *GetNewWalletAddressRequest) (*GetNewWalletAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewWalletAddress", arg0, arg1)
	ret0, _ := ret[0].(*GetNewWalletAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewWalletAddress indicates an expected call of GetNewWalletAddress.
func (mr *MockNodeGuardServiceServerMockRecorder) GetNewWalletAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewWalletAddress", reflect.TypeOf((*MockNodeGuardServiceServer)(nil).GetNewWalletAddress), arg0, arg1)
}

// RequestWithdrawal mocks base method.
func (m *MockNodeGuardServiceServer) RequestWithdrawal(arg0 context.Context, arg1 *RequestWithdrawalRequest) (*RequestWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWithdrawal", arg0, arg1)
	ret0, _ := ret[0].(*RequestWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestWithdrawal indicates an expected call of RequestWithdrawal.
func (mr *MockNodeGuardServiceServerMockRecorder) RequestWithdrawal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithdrawal", reflect.TypeOf((*MockNodeGuardServiceServer)(nil).RequestWithdrawal), arg0, arg1)
}

// mustEmbedUnimplementedNodeGuardServiceServer mocks base method.
func (m *MockNodeGuardServiceServer) mustEmbedUnimplementedNodeGuardServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNodeGuardServiceServer")
}

// mustEmbedUnimplementedNodeGuardServiceServer indicates an expected call of mustEmbedUnimplementedNodeGuardServiceServer.
func (mr *MockNodeGuardServiceServerMockRecorder) mustEmbedUnimplementedNodeGuardServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNodeGuardServiceServer", reflect.TypeOf((*MockNodeGuardServiceServer)(nil).mustEmbedUnimplementedNodeGuardServiceServer))
}

// MockUnsafeNodeGuardServiceServer is a mock of UnsafeNodeGuardServiceServer interface.
type MockUnsafeNodeGuardServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeNodeGuardServiceServerMockRecorder
}

// MockUnsafeNodeGuardServiceServerMockRecorder is the mock recorder for MockUnsafeNodeGuardServiceServer.
type MockUnsafeNodeGuardServiceServerMockRecorder struct {
	mock *MockUnsafeNodeGuardServiceServer
}

// NewMockUnsafeNodeGuardServiceServer creates a new mock instance.
func NewMockUnsafeNodeGuardServiceServer(ctrl *gomock.Controller) *MockUnsafeNodeGuardServiceServer {
	mock := &MockUnsafeNodeGuardServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeNodeGuardServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeNodeGuardServiceServer) EXPECT() *MockUnsafeNodeGuardServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedNodeGuardServiceServer mocks base method.
func (m *MockUnsafeNodeGuardServiceServer) mustEmbedUnimplementedNodeGuardServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNodeGuardServiceServer")
}

// mustEmbedUnimplementedNodeGuardServiceServer indicates an expected call of mustEmbedUnimplementedNodeGuardServiceServer.
func (mr *MockUnsafeNodeGuardServiceServerMockRecorder) mustEmbedUnimplementedNodeGuardServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNodeGuardServiceServer", reflect.TypeOf((*MockUnsafeNodeGuardServiceServer)(nil).mustEmbedUnimplementedNodeGuardServiceServer))
}
