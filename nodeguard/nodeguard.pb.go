// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.3
// source: nodeguard.proto

package nodeguard

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WALLET_TYPE int32

const (
	WALLET_TYPE_BOTH WALLET_TYPE = 0
	WALLET_TYPE_HOT  WALLET_TYPE = 1
	WALLET_TYPE_COLD WALLET_TYPE = 2
)

// Enum value maps for WALLET_TYPE.
var (
	WALLET_TYPE_name = map[int32]string{
		0: "BOTH",
		1: "HOT",
		2: "COLD",
	}
	WALLET_TYPE_value = map[string]int32{
		"BOTH": 0,
		"HOT":  1,
		"COLD": 2,
	}
)

func (x WALLET_TYPE) Enum() *WALLET_TYPE {
	p := new(WALLET_TYPE)
	*p = x
	return p
}

func (x WALLET_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WALLET_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_nodeguard_proto_enumTypes[0].Descriptor()
}

func (WALLET_TYPE) Type() protoreflect.EnumType {
	return &file_nodeguard_proto_enumTypes[0]
}

func (x WALLET_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WALLET_TYPE.Descriptor instead.
func (WALLET_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{0}
}

type FEES_TYPE int32

const (
	FEES_TYPE_ECONOMY_FEE   FEES_TYPE = 0
	FEES_TYPE_FASTEST_FEE   FEES_TYPE = 1
	FEES_TYPE_HOUR_FEE      FEES_TYPE = 2
	FEES_TYPE_HALF_HOUR_FEE FEES_TYPE = 3
	FEES_TYPE_CUSTOM_FEE    FEES_TYPE = 4
)

// Enum value maps for FEES_TYPE.
var (
	FEES_TYPE_name = map[int32]string{
		0: "ECONOMY_FEE",
		1: "FASTEST_FEE",
		2: "HOUR_FEE",
		3: "HALF_HOUR_FEE",
		4: "CUSTOM_FEE",
	}
	FEES_TYPE_value = map[string]int32{
		"ECONOMY_FEE":   0,
		"FASTEST_FEE":   1,
		"HOUR_FEE":      2,
		"HALF_HOUR_FEE": 3,
		"CUSTOM_FEE":    4,
	}
)

func (x FEES_TYPE) Enum() *FEES_TYPE {
	p := new(FEES_TYPE)
	*p = x
	return p
}

func (x FEES_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FEES_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_nodeguard_proto_enumTypes[1].Descriptor()
}

func (FEES_TYPE) Type() protoreflect.EnumType {
	return &file_nodeguard_proto_enumTypes[1]
}

func (x FEES_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FEES_TYPE.Descriptor instead.
func (FEES_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{1}
}

type CHANNEL_OPERATION_STATUS int32

const (
	CHANNEL_OPERATION_STATUS_APPROVED                     CHANNEL_OPERATION_STATUS = 0
	CHANNEL_OPERATION_STATUS_CANCELLED                    CHANNEL_OPERATION_STATUS = 1
	CHANNEL_OPERATION_STATUS_REJECTED                     CHANNEL_OPERATION_STATUS = 2
	CHANNEL_OPERATION_STATUS_PENDING                      CHANNEL_OPERATION_STATUS = 3
	CHANNEL_OPERATION_STATUS_PSBT_SIGNATURES_PENDING      CHANNEL_OPERATION_STATUS = 4
	CHANNEL_OPERATION_STATUS_ONCHAIN_CONFIRMATION_PENDING CHANNEL_OPERATION_STATUS = 5
	CHANNEL_OPERATION_STATUS_ONCHAIN_CONFIRMED            CHANNEL_OPERATION_STATUS = 6
	CHANNEL_OPERATION_STATUS_FAILED                       CHANNEL_OPERATION_STATUS = 7
	CHANNEL_OPERATION_STATUS_FINALIZING_PSBT              CHANNEL_OPERATION_STATUS = 8
)

// Enum value maps for CHANNEL_OPERATION_STATUS.
var (
	CHANNEL_OPERATION_STATUS_name = map[int32]string{
		0: "APPROVED",
		1: "CANCELLED",
		2: "REJECTED",
		3: "PENDING",
		4: "PSBT_SIGNATURES_PENDING",
		5: "ONCHAIN_CONFIRMATION_PENDING",
		6: "ONCHAIN_CONFIRMED",
		7: "FAILED",
		8: "FINALIZING_PSBT",
	}
	CHANNEL_OPERATION_STATUS_value = map[string]int32{
		"APPROVED":                     0,
		"CANCELLED":                    1,
		"REJECTED":                     2,
		"PENDING":                      3,
		"PSBT_SIGNATURES_PENDING":      4,
		"ONCHAIN_CONFIRMATION_PENDING": 5,
		"ONCHAIN_CONFIRMED":            6,
		"FAILED":                       7,
		"FINALIZING_PSBT":              8,
	}
)

func (x CHANNEL_OPERATION_STATUS) Enum() *CHANNEL_OPERATION_STATUS {
	p := new(CHANNEL_OPERATION_STATUS)
	*p = x
	return p
}

func (x CHANNEL_OPERATION_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CHANNEL_OPERATION_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_nodeguard_proto_enumTypes[2].Descriptor()
}

func (CHANNEL_OPERATION_STATUS) Type() protoreflect.EnumType {
	return &file_nodeguard_proto_enumTypes[2]
}

func (x CHANNEL_OPERATION_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CHANNEL_OPERATION_STATUS.Descriptor instead.
func (CHANNEL_OPERATION_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{2}
}

type CHANNEL_OPERATION_TYPE int32

const (
	CHANNEL_OPERATION_TYPE_OPEN_CHANNEL  CHANNEL_OPERATION_TYPE = 0
	CHANNEL_OPERATION_TYPE_CLOSE_CHANNEL CHANNEL_OPERATION_TYPE = 1
)

// Enum value maps for CHANNEL_OPERATION_TYPE.
var (
	CHANNEL_OPERATION_TYPE_name = map[int32]string{
		0: "OPEN_CHANNEL",
		1: "CLOSE_CHANNEL",
	}
	CHANNEL_OPERATION_TYPE_value = map[string]int32{
		"OPEN_CHANNEL":  0,
		"CLOSE_CHANNEL": 1,
	}
)

func (x CHANNEL_OPERATION_TYPE) Enum() *CHANNEL_OPERATION_TYPE {
	p := new(CHANNEL_OPERATION_TYPE)
	*p = x
	return p
}

func (x CHANNEL_OPERATION_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CHANNEL_OPERATION_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_nodeguard_proto_enumTypes[3].Descriptor()
}

func (CHANNEL_OPERATION_TYPE) Type() protoreflect.EnumType {
	return &file_nodeguard_proto_enumTypes[3]
}

func (x CHANNEL_OPERATION_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CHANNEL_OPERATION_TYPE.Descriptor instead.
func (CHANNEL_OPERATION_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{3}
}

type COIN_SELECTION_STRATEGY int32

const (
	COIN_SELECTION_STRATEGY_SMALLEST_FIRST          COIN_SELECTION_STRATEGY = 0
	COIN_SELECTION_STRATEGY_BIGGEST_FIRST           COIN_SELECTION_STRATEGY = 1
	COIN_SELECTION_STRATEGY_CLOSEST_TO_TARGET_FIRST COIN_SELECTION_STRATEGY = 2
	COIN_SELECTION_STRATEGY_UP_TO_AMOUNT            COIN_SELECTION_STRATEGY = 3
)

// Enum value maps for COIN_SELECTION_STRATEGY.
var (
	COIN_SELECTION_STRATEGY_name = map[int32]string{
		0: "SMALLEST_FIRST",
		1: "BIGGEST_FIRST",
		2: "CLOSEST_TO_TARGET_FIRST",
		3: "UP_TO_AMOUNT",
	}
	COIN_SELECTION_STRATEGY_value = map[string]int32{
		"SMALLEST_FIRST":          0,
		"BIGGEST_FIRST":           1,
		"CLOSEST_TO_TARGET_FIRST": 2,
		"UP_TO_AMOUNT":            3,
	}
)

func (x COIN_SELECTION_STRATEGY) Enum() *COIN_SELECTION_STRATEGY {
	p := new(COIN_SELECTION_STRATEGY)
	*p = x
	return p
}

func (x COIN_SELECTION_STRATEGY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COIN_SELECTION_STRATEGY) Descriptor() protoreflect.EnumDescriptor {
	return file_nodeguard_proto_enumTypes[4].Descriptor()
}

func (COIN_SELECTION_STRATEGY) Type() protoreflect.EnumType {
	return &file_nodeguard_proto_enumTypes[4]
}

func (x COIN_SELECTION_STRATEGY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COIN_SELECTION_STRATEGY.Descriptor instead.
func (COIN_SELECTION_STRATEGY) EnumDescriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{4}
}

type WITHDRAWAL_REQUEST_STATUS int32

const (
	WITHDRAWAL_REQUEST_STATUS_WITHDRAWAL_SETTLED              WITHDRAWAL_REQUEST_STATUS = 0
	WITHDRAWAL_REQUEST_STATUS_WITHDRAWAL_PENDING_APPROVAL     WITHDRAWAL_REQUEST_STATUS = 1
	WITHDRAWAL_REQUEST_STATUS_WITHDRAWAL_CANCELLED            WITHDRAWAL_REQUEST_STATUS = 2
	WITHDRAWAL_REQUEST_STATUS_WITHDRAWAL_REJECTED             WITHDRAWAL_REQUEST_STATUS = 3
	WITHDRAWAL_REQUEST_STATUS_WITHDRAWAL_PENDING_CONFIRMATION WITHDRAWAL_REQUEST_STATUS = 4
	WITHDRAWAL_REQUEST_STATUS_WITHDRAWAL_FAILED               WITHDRAWAL_REQUEST_STATUS = 5
	WITHDRAWAL_REQUEST_STATUS_WITHDRAWAL_BUMPED               WITHDRAWAL_REQUEST_STATUS = 6
)

// Enum value maps for WITHDRAWAL_REQUEST_STATUS.
var (
	WITHDRAWAL_REQUEST_STATUS_name = map[int32]string{
		0: "WITHDRAWAL_SETTLED",
		1: "WITHDRAWAL_PENDING_APPROVAL",
		2: "WITHDRAWAL_CANCELLED",
		3: "WITHDRAWAL_REJECTED",
		4: "WITHDRAWAL_PENDING_CONFIRMATION",
		5: "WITHDRAWAL_FAILED",
		6: "WITHDRAWAL_BUMPED",
	}
	WITHDRAWAL_REQUEST_STATUS_value = map[string]int32{
		"WITHDRAWAL_SETTLED":              0,
		"WITHDRAWAL_PENDING_APPROVAL":     1,
		"WITHDRAWAL_CANCELLED":            2,
		"WITHDRAWAL_REJECTED":             3,
		"WITHDRAWAL_PENDING_CONFIRMATION": 4,
		"WITHDRAWAL_FAILED":               5,
		"WITHDRAWAL_BUMPED":               6,
	}
)

func (x WITHDRAWAL_REQUEST_STATUS) Enum() *WITHDRAWAL_REQUEST_STATUS {
	p := new(WITHDRAWAL_REQUEST_STATUS)
	*p = x
	return p
}

func (x WITHDRAWAL_REQUEST_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WITHDRAWAL_REQUEST_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_nodeguard_proto_enumTypes[5].Descriptor()
}

func (WITHDRAWAL_REQUEST_STATUS) Type() protoreflect.EnumType {
	return &file_nodeguard_proto_enumTypes[5]
}

func (x WITHDRAWAL_REQUEST_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WITHDRAWAL_REQUEST_STATUS.Descriptor instead.
func (WITHDRAWAL_REQUEST_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{5}
}

type CHANNEL_STATUS int32

const (
	CHANNEL_STATUS_OPEN   CHANNEL_STATUS = 0
	CHANNEL_STATUS_CLOSED CHANNEL_STATUS = 1
)

// Enum value maps for CHANNEL_STATUS.
var (
	CHANNEL_STATUS_name = map[int32]string{
		0: "OPEN",
		1: "CLOSED",
	}
	CHANNEL_STATUS_value = map[string]int32{
		"OPEN":   0,
		"CLOSED": 1,
	}
)

func (x CHANNEL_STATUS) Enum() *CHANNEL_STATUS {
	p := new(CHANNEL_STATUS)
	*p = x
	return p
}

func (x CHANNEL_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CHANNEL_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_nodeguard_proto_enumTypes[6].Descriptor()
}

func (CHANNEL_STATUS) Type() protoreflect.EnumType {
	return &file_nodeguard_proto_enumTypes[6]
}

func (x CHANNEL_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CHANNEL_STATUS.Descriptor instead.
func (CHANNEL_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{6}
}

type GetLiquidityRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodePubkey string `protobuf:"bytes,1,opt,name=node_pubkey,json=nodePubkey,proto3" json:"node_pubkey,omitempty"`
}

func (x *GetLiquidityRulesRequest) Reset() {
	*x = GetLiquidityRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiquidityRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiquidityRulesRequest) ProtoMessage() {}

func (x *GetLiquidityRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiquidityRulesRequest.ProtoReflect.Descriptor instead.
func (*GetLiquidityRulesRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{0}
}

func (x *GetLiquidityRulesRequest) GetNodePubkey() string {
	if x != nil {
		return x.NodePubkey
	}
	return ""
}

type GetLiquidityRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiquidityRules []*LiquidityRule `protobuf:"bytes,1,rep,name=liquidity_rules,json=liquidityRules,proto3" json:"liquidity_rules,omitempty"`
}

func (x *GetLiquidityRulesResponse) Reset() {
	*x = GetLiquidityRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiquidityRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiquidityRulesResponse) ProtoMessage() {}

func (x *GetLiquidityRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiquidityRulesResponse.ProtoReflect.Descriptor instead.
func (*GetLiquidityRulesResponse) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{1}
}

func (x *GetLiquidityRulesResponse) GetLiquidityRules() []*LiquidityRule {
	if x != nil {
		return x.LiquidityRules
	}
	return nil
}

type LiquidityRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Public key of the node that is the managed node of the channel
	NodePubkey              string  `protobuf:"bytes,2,opt,name=node_pubkey,json=nodePubkey,proto3" json:"node_pubkey,omitempty"`
	SwapWalletId            int32   `protobuf:"varint,3,opt,name=swap_wallet_id,json=swapWalletId,proto3" json:"swap_wallet_id,omitempty"`
	ReverseSwapWalletId     *int32  `protobuf:"varint,4,opt,name=reverse_swap_wallet_id,json=reverseSwapWalletId,proto3,oneof" json:"reverse_swap_wallet_id,omitempty"`
	MinimumLocalBalance     float32 `protobuf:"fixed32,5,opt,name=minimum_local_balance,json=minimumLocalBalance,proto3" json:"minimum_local_balance,omitempty"`
	MinimumRemoteBalance    float32 `protobuf:"fixed32,6,opt,name=minimum_remote_balance,json=minimumRemoteBalance,proto3" json:"minimum_remote_balance,omitempty"`
	RebalanceTarget         float32 `protobuf:"fixed32,7,opt,name=rebalance_target,json=rebalanceTarget,proto3" json:"rebalance_target,omitempty"`
	ReverseSwapAddress      *string `protobuf:"bytes,8,opt,name=reverse_swap_address,json=reverseSwapAddress,proto3,oneof" json:"reverse_swap_address,omitempty"`
	IsReverseSwapWalletRule bool    `protobuf:"varint,9,opt,name=is_reverse_swap_wallet_rule,json=isReverseSwapWalletRule,proto3" json:"is_reverse_swap_wallet_rule,omitempty"`
	// Public key of the node that is the counterparty of the channel
	RemoteNodePubkey string `protobuf:"bytes,10,opt,name=remote_node_pubkey,json=remoteNodePubkey,proto3" json:"remote_node_pubkey,omitempty"`
}

func (x *LiquidityRule) Reset() {
	*x = LiquidityRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityRule) ProtoMessage() {}

func (x *LiquidityRule) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityRule.ProtoReflect.Descriptor instead.
func (*LiquidityRule) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{2}
}

func (x *LiquidityRule) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *LiquidityRule) GetNodePubkey() string {
	if x != nil {
		return x.NodePubkey
	}
	return ""
}

func (x *LiquidityRule) GetSwapWalletId() int32 {
	if x != nil {
		return x.SwapWalletId
	}
	return 0
}

func (x *LiquidityRule) GetReverseSwapWalletId() int32 {
	if x != nil && x.ReverseSwapWalletId != nil {
		return *x.ReverseSwapWalletId
	}
	return 0
}

func (x *LiquidityRule) GetMinimumLocalBalance() float32 {
	if x != nil {
		return x.MinimumLocalBalance
	}
	return 0
}

func (x *LiquidityRule) GetMinimumRemoteBalance() float32 {
	if x != nil {
		return x.MinimumRemoteBalance
	}
	return 0
}

func (x *LiquidityRule) GetRebalanceTarget() float32 {
	if x != nil {
		return x.RebalanceTarget
	}
	return 0
}

func (x *LiquidityRule) GetReverseSwapAddress() string {
	if x != nil && x.ReverseSwapAddress != nil {
		return *x.ReverseSwapAddress
	}
	return ""
}

func (x *LiquidityRule) GetIsReverseSwapWalletRule() bool {
	if x != nil {
		return x.IsReverseSwapWalletRule
	}
	return false
}

func (x *LiquidityRule) GetRemoteNodePubkey() string {
	if x != nil {
		return x.RemoteNodePubkey
	}
	return ""
}

type GetNewWalletAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId int32 `protobuf:"varint,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Reserve  bool  `protobuf:"varint,2,opt,name=reserve,proto3" json:"reserve,omitempty"` // If set to true, the returned address will be marked as used
}

func (x *GetNewWalletAddressRequest) Reset() {
	*x = GetNewWalletAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewWalletAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewWalletAddressRequest) ProtoMessage() {}

func (x *GetNewWalletAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewWalletAddressRequest.ProtoReflect.Descriptor instead.
func (*GetNewWalletAddressRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{3}
}

func (x *GetNewWalletAddressRequest) GetWalletId() int32 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *GetNewWalletAddressRequest) GetReserve() bool {
	if x != nil {
		return x.Reserve
	}
	return false
}

type GetNewWalletAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetNewWalletAddressResponse) Reset() {
	*x = GetNewWalletAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewWalletAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewWalletAddressResponse) ProtoMessage() {}

func (x *GetNewWalletAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewWalletAddressResponse.ProtoReflect.Descriptor instead.
func (*GetNewWalletAddressResponse) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{4}
}

func (x *GetNewWalletAddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BTC address to send the funds to
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Amount in satoshis
	AmountSats int64 `protobuf:"varint,2,opt,name=amount_sats,json=amountSats,proto3" json:"amount_sats,omitempty"`
}

func (x *Destination) Reset() {
	*x = Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destination) ProtoMessage() {}

func (x *Destination) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destination.ProtoReflect.Descriptor instead.
func (*Destination) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{5}
}

func (x *Destination) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Destination) GetAmountSats() int64 {
	if x != nil {
		return x.AmountSats
	}
	return 0
}

type RequestWithdrawalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId int32 `protobuf:"varint,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// Deprecated: Marked as deprecated in nodeguard.proto.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Amount in satoshis
	//
	// Deprecated: Marked as deprecated in nodeguard.proto.
	Amount      int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// in JSON format
	RequestMetadata string `protobuf:"bytes,5,opt,name=request_metadata,json=requestMetadata,proto3" json:"request_metadata,omitempty"`
	// Whether the withdrawal should be performed in a changeless way
	Changeless bool `protobuf:"varint,6,opt,name=changeless,proto3" json:"changeless,omitempty"`
	// Outpoints for the UTXOs to use for the withdrawal
	UtxosOutpoints []string `protobuf:"bytes,7,rep,name=utxos_outpoints,json=utxosOutpoints,proto3" json:"utxos_outpoints,omitempty"`
	// MempoolRecommended fee rate
	MempoolFeeRate FEES_TYPE `protobuf:"varint,8,opt,name=mempool_fee_rate,json=mempoolFeeRate,proto3,enum=nodeguard.FEES_TYPE" json:"mempool_fee_rate,omitempty"`
	// Fee rate in sat/vbyte
	CustomFeeRate *int32 `protobuf:"varint,9,opt,name=custom_fee_rate,json=customFeeRate,proto3,oneof" json:"custom_fee_rate,omitempty"`
	// External reference id for the withdrawal request
	ReferenceId *string `protobuf:"bytes,10,opt,name=reference_id,json=referenceId,proto3,oneof" json:"reference_id,omitempty"`
	// Destinations for the withdrawal
	Destinations []*Destination `protobuf:"bytes,11,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *RequestWithdrawalRequest) Reset() {
	*x = RequestWithdrawalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWithdrawalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWithdrawalRequest) ProtoMessage() {}

func (x *RequestWithdrawalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWithdrawalRequest.ProtoReflect.Descriptor instead.
func (*RequestWithdrawalRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{6}
}

func (x *RequestWithdrawalRequest) GetWalletId() int32 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

// Deprecated: Marked as deprecated in nodeguard.proto.
func (x *RequestWithdrawalRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Deprecated: Marked as deprecated in nodeguard.proto.
func (x *RequestWithdrawalRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RequestWithdrawalRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RequestWithdrawalRequest) GetRequestMetadata() string {
	if x != nil {
		return x.RequestMetadata
	}
	return ""
}

func (x *RequestWithdrawalRequest) GetChangeless() bool {
	if x != nil {
		return x.Changeless
	}
	return false
}

func (x *RequestWithdrawalRequest) GetUtxosOutpoints() []string {
	if x != nil {
		return x.UtxosOutpoints
	}
	return nil
}

func (x *RequestWithdrawalRequest) GetMempoolFeeRate() FEES_TYPE {
	if x != nil {
		return x.MempoolFeeRate
	}
	return FEES_TYPE_ECONOMY_FEE
}

func (x *RequestWithdrawalRequest) GetCustomFeeRate() int32 {
	if x != nil && x.CustomFeeRate != nil {
		return *x.CustomFeeRate
	}
	return 0
}

func (x *RequestWithdrawalRequest) GetReferenceId() string {
	if x != nil && x.ReferenceId != nil {
		return *x.ReferenceId
	}
	return ""
}

func (x *RequestWithdrawalRequest) GetDestinations() []*Destination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

type RequestWithdrawalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optionalTransaction ID of the withdrawal
	Txid        string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	IsHotWallet bool   `protobuf:"varint,2,opt,name=is_hot_wallet,json=isHotWallet,proto3" json:"is_hot_wallet,omitempty"`
	RequestId   int32  `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *RequestWithdrawalResponse) Reset() {
	*x = RequestWithdrawalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWithdrawalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWithdrawalResponse) ProtoMessage() {}

func (x *RequestWithdrawalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWithdrawalResponse.ProtoReflect.Descriptor instead.
func (*RequestWithdrawalResponse) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{7}
}

func (x *RequestWithdrawalResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *RequestWithdrawalResponse) GetIsHotWallet() bool {
	if x != nil {
		return x.IsHotWallet
	}
	return false
}

func (x *RequestWithdrawalResponse) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type GetAvailableWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         []int32      `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	WalletType *WALLET_TYPE `protobuf:"varint,2,opt,name=wallet_type,json=walletType,proto3,enum=nodeguard.WALLET_TYPE,oneof" json:"wallet_type,omitempty"`
}

func (x *GetAvailableWalletsRequest) Reset() {
	*x = GetAvailableWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableWalletsRequest) ProtoMessage() {}

func (x *GetAvailableWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableWalletsRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableWalletsRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{8}
}

func (x *GetAvailableWalletsRequest) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetAvailableWalletsRequest) GetWalletType() WALLET_TYPE {
	if x != nil && x.WalletType != nil {
		return *x.WalletType
	}
	return WALLET_TYPE_BOTH
}

type AccountKeySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpub string `protobuf:"bytes,1,opt,name=xpub,proto3" json:"xpub,omitempty"`
}

func (x *AccountKeySettings) Reset() {
	*x = AccountKeySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountKeySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountKeySettings) ProtoMessage() {}

func (x *AccountKeySettings) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountKeySettings.ProtoReflect.Descriptor instead.
func (*AccountKeySettings) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{9}
}

func (x *AccountKeySettings) GetXpub() string {
	if x != nil {
		return x.Xpub
	}
	return ""
}

type Wallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsHotWallet        bool                  `protobuf:"varint,3,opt,name=is_hot_wallet,json=isHotWallet,proto3" json:"is_hot_wallet,omitempty"`
	AccountKeySettings []*AccountKeySettings `protobuf:"bytes,4,rep,name=account_key_settings,json=accountKeySettings,proto3" json:"account_key_settings,omitempty"`
	Threshold          int32                 `protobuf:"varint,5,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Wallet) Reset() {
	*x = Wallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallet) ProtoMessage() {}

func (x *Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallet.ProtoReflect.Descriptor instead.
func (*Wallet) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{10}
}

func (x *Wallet) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Wallet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Wallet) GetIsHotWallet() bool {
	if x != nil {
		return x.IsHotWallet
	}
	return false
}

func (x *Wallet) GetAccountKeySettings() []*AccountKeySettings {
	if x != nil {
		return x.AccountKeySettings
	}
	return nil
}

func (x *Wallet) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type GetAvailableWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallets []*Wallet `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *GetAvailableWalletsResponse) Reset() {
	*x = GetAvailableWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableWalletsResponse) ProtoMessage() {}

func (x *GetAvailableWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableWalletsResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableWalletsResponse) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{11}
}

func (x *GetAvailableWalletsResponse) GetWallets() []*Wallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type GetWalletBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletId int32 `protobuf:"varint,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *GetWalletBalanceRequest) Reset() {
	*x = GetWalletBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletBalanceRequest) ProtoMessage() {}

func (x *GetWalletBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetWalletBalanceRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{12}
}

func (x *GetWalletBalanceRequest) GetWalletId() int32 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

type GetWalletBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Confirmed balance in satoshis
	ConfirmedBalance int64 `protobuf:"varint,1,opt,name=confirmed_balance,json=confirmedBalance,proto3" json:"confirmed_balance,omitempty"`
	// Unconfirmed balance in satoshis
	UnconfirmedBalance int64 `protobuf:"varint,2,opt,name=unconfirmed_balance,json=unconfirmedBalance,proto3" json:"unconfirmed_balance,omitempty"`
}

func (x *GetWalletBalanceResponse) Reset() {
	*x = GetWalletBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletBalanceResponse) ProtoMessage() {}

func (x *GetWalletBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetWalletBalanceResponse) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{13}
}

func (x *GetWalletBalanceResponse) GetConfirmedBalance() int64 {
	if x != nil {
		return x.ConfirmedBalance
	}
	return 0
}

func (x *GetWalletBalanceResponse) GetUnconfirmedBalance() int64 {
	if x != nil {
		return x.UnconfirmedBalance
	}
	return 0
}

type AddNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey      string `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Channel admin macaroon
	ChannelAdminMacaroon string `protobuf:"bytes,4,opt,name=channel_admin_macaroon,json=channelAdminMacaroon,proto3" json:"channel_admin_macaroon,omitempty"`
	// Endpoint of the node in the form of host:port (gRPC)
	Endpoint string `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Whether this node's hot wallet should be autoswept to the returning funds wallet
	AutosweepEnabled bool `protobuf:"varint,6,opt,name=autosweep_enabled,json=autosweepEnabled,proto3" json:"autosweep_enabled,omitempty"`
	// Wallet ID as stored in the NG's database for use in autosweep ops
	ReturningFundsWalletId int32 `protobuf:"varint,7,opt,name=returning_funds_wallet_id,json=returningFundsWalletId,proto3" json:"returning_funds_wallet_id,omitempty"`
}

func (x *AddNodeRequest) Reset() {
	*x = AddNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodeRequest) ProtoMessage() {}

func (x *AddNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodeRequest.ProtoReflect.Descriptor instead.
func (*AddNodeRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{14}
}

func (x *AddNodeRequest) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *AddNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddNodeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddNodeRequest) GetChannelAdminMacaroon() string {
	if x != nil {
		return x.ChannelAdminMacaroon
	}
	return ""
}

func (x *AddNodeRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *AddNodeRequest) GetAutosweepEnabled() bool {
	if x != nil {
		return x.AutosweepEnabled
	}
	return false
}

func (x *AddNodeRequest) GetReturningFundsWalletId() int32 {
	if x != nil {
		return x.ReturningFundsWalletId
	}
	return 0
}

type AddNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddNodeResponse) Reset() {
	*x = AddNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodeResponse) ProtoMessage() {}

func (x *AddNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodeResponse.ProtoReflect.Descriptor instead.
func (*AddNodeResponse) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{15}
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node Id as in NodeGuard's database
	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PubKey      string `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Endpoint of the node in the form of host:port (gRPC)
	Endpoint string `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Whether this node's hot wallet should be autoswept to the returning funds wallet
	AutosweepEnabled bool `protobuf:"varint,6,opt,name=autosweep_enabled,json=autosweepEnabled,proto3" json:"autosweep_enabled,omitempty"`
	// Wallet ID as stored in the NG's database for use in autosweep ops
	ReturningFundsWalletId int32 `protobuf:"varint,7,opt,name=returning_funds_wallet_id,json=returningFundsWalletId,proto3" json:"returning_funds_wallet_id,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{16}
}

func (x *Node) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Node) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Node) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Node) GetAutosweepEnabled() bool {
	if x != nil {
		return x.AutosweepEnabled
	}
	return false
}

func (x *Node) GetReturningFundsWalletId() int32 {
	if x != nil {
		return x.ReturningFundsWalletId
	}
	return 0
}

type GetNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to include nodes that are not managed by the NG
	IncludeUnmanaged bool `protobuf:"varint,1,opt,name=include_unmanaged,json=includeUnmanaged,proto3" json:"include_unmanaged,omitempty"`
}

func (x *GetNodesRequest) Reset() {
	*x = GetNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesRequest) ProtoMessage() {}

func (x *GetNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesRequest.ProtoReflect.Descriptor instead.
func (*GetNodesRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{17}
}

func (x *GetNodesRequest) GetIncludeUnmanaged() bool {
	if x != nil {
		return x.IncludeUnmanaged
	}
	return false
}

type GetNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *GetNodesResponse) Reset() {
	*x = GetNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesResponse) ProtoMessage() {}

func (x *GetNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesResponse.ProtoReflect.Descriptor instead.
func (*GetNodesResponse) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{18}
}

func (x *GetNodesResponse) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type OpenChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source node pubkey
	SourcePubKey string `protobuf:"bytes,5,opt,name=source_pub_key,json=sourcePubKey,proto3" json:"source_pub_key,omitempty"`
	// Destination node pubkey
	DestinationPubKey string `protobuf:"bytes,1,opt,name=destination_pub_key,json=destinationPubKey,proto3" json:"destination_pub_key,omitempty"`
	// Wallet ID as stored in the NG's database
	WalletId int32 `protobuf:"varint,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// Amount in satoshis
	SatsAmount int64 `protobuf:"varint,3,opt,name=sats_amount,json=satsAmount,proto3" json:"sats_amount,omitempty"`
	// Whether the channel should be private
	Private bool `protobuf:"varint,4,opt,name=private,proto3" json:"private,omitempty"`
	// Whether the channel should be created in a changeless way
	Changeless bool `protobuf:"varint,6,opt,name=changeless,proto3" json:"changeless,omitempty"`
	// Outpoints for the UTXOs to use for the channel
	UtxosOutpoints []string `protobuf:"bytes,7,rep,name=utxos_outpoints,json=utxosOutpoints,proto3" json:"utxos_outpoints,omitempty"`
	// MempoolRecommended fee rate
	MempoolFeeRate FEES_TYPE `protobuf:"varint,8,opt,name=mempool_fee_rate,json=mempoolFeeRate,proto3,enum=nodeguard.FEES_TYPE" json:"mempool_fee_rate,omitempty"`
	// Fee rate in sat/vbyte
	CustomFeeRate *int32 `protobuf:"varint,9,opt,name=custom_fee_rate,json=customFeeRate,proto3,oneof" json:"custom_fee_rate,omitempty"`
}

func (x *OpenChannelRequest) Reset() {
	*x = OpenChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenChannelRequest) ProtoMessage() {}

func (x *OpenChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenChannelRequest.ProtoReflect.Descriptor instead.
func (*OpenChannelRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{19}
}

func (x *OpenChannelRequest) GetSourcePubKey() string {
	if x != nil {
		return x.SourcePubKey
	}
	return ""
}

func (x *OpenChannelRequest) GetDestinationPubKey() string {
	if x != nil {
		return x.DestinationPubKey
	}
	return ""
}

func (x *OpenChannelRequest) GetWalletId() int32 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *OpenChannelRequest) GetSatsAmount() int64 {
	if x != nil {
		return x.SatsAmount
	}
	return 0
}

func (x *OpenChannelRequest) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *OpenChannelRequest) GetChangeless() bool {
	if x != nil {
		return x.Changeless
	}
	return false
}

func (x *OpenChannelRequest) GetUtxosOutpoints() []string {
	if x != nil {
		return x.UtxosOutpoints
	}
	return nil
}

func (x *OpenChannelRequest) GetMempoolFeeRate() FEES_TYPE {
	if x != nil {
		return x.MempoolFeeRate
	}
	return FEES_TYPE_ECONOMY_FEE
}

func (x *OpenChannelRequest) GetCustomFeeRate() int32 {
	if x != nil && x.CustomFeeRate != nil {
		return *x.CustomFeeRate
	}
	return 0
}

// A successful response returns the channel_operation_request_id but it does NOT indicate that the channel has been open, external monitoring is required
type OpenChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelOperationRequestId int32 `protobuf:"varint,1,opt,name=channel_operation_request_id,json=channelOperationRequestId,proto3" json:"channel_operation_request_id,omitempty"`
}

func (x *OpenChannelResponse) Reset() {
	*x = OpenChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenChannelResponse) ProtoMessage() {}

func (x *OpenChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenChannelResponse.ProtoReflect.Descriptor instead.
func (*OpenChannelResponse) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{20}
}

func (x *OpenChannelResponse) GetChannelOperationRequestId() int32 {
	if x != nil {
		return x.ChannelOperationRequestId
	}
	return 0
}

type CloseChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Channel ID as returned by the Lightning implementation
	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Force close the channel
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *CloseChannelRequest) Reset() {
	*x = CloseChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseChannelRequest) ProtoMessage() {}

func (x *CloseChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseChannelRequest.ProtoReflect.Descriptor instead.
func (*CloseChannelRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{21}
}

func (x *CloseChannelRequest) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *CloseChannelRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// A successful response is an empty message and does NOT indicate that the channel has been closed, external monitoring is required
type CloseChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseChannelResponse) Reset() {
	*x = CloseChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseChannelResponse) ProtoMessage() {}

func (x *CloseChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseChannelResponse.ProtoReflect.Descriptor instead.
func (*CloseChannelResponse) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{22}
}

type GetChannelOperationRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to include requests that are not managed by the NG
	ChannelOperationRequestId int32 `protobuf:"varint,1,opt,name=channel_operation_request_id,json=channelOperationRequestId,proto3" json:"channel_operation_request_id,omitempty"`
}

func (x *GetChannelOperationRequestRequest) Reset() {
	*x = GetChannelOperationRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelOperationRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelOperationRequestRequest) ProtoMessage() {}

func (x *GetChannelOperationRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelOperationRequestRequest.ProtoReflect.Descriptor instead.
func (*GetChannelOperationRequestRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{23}
}

func (x *GetChannelOperationRequestRequest) GetChannelOperationRequestId() int32 {
	if x != nil {
		return x.ChannelOperationRequestId
	}
	return 0
}

type GetChannelOperationRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SatsAmount    int64                     `protobuf:"varint,1,opt,name=sats_amount,json=satsAmount,proto3" json:"sats_amount,omitempty"`
	Description   string                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Status        *CHANNEL_OPERATION_STATUS `protobuf:"varint,3,opt,name=status,proto3,enum=nodeguard.CHANNEL_OPERATION_STATUS,oneof" json:"status,omitempty"`
	Type          *CHANNEL_OPERATION_TYPE   `protobuf:"varint,4,opt,name=type,proto3,enum=nodeguard.CHANNEL_OPERATION_TYPE,oneof" json:"type,omitempty"`
	TxId          *string                   `protobuf:"bytes,5,opt,name=tx_id,json=txId,proto3,oneof" json:"tx_id,omitempty"`
	ClosingReason *string                   `protobuf:"bytes,6,opt,name=closing_reason,json=closingReason,proto3,oneof" json:"closing_reason,omitempty"`
	FeeRate       *float64                  `protobuf:"fixed64,7,opt,name=fee_rate,json=feeRate,proto3,oneof" json:"fee_rate,omitempty"`
	WalletId      *int32                    `protobuf:"varint,8,opt,name=wallet_id,json=walletId,proto3,oneof" json:"wallet_id,omitempty"`
	SourceNodeId  int32                     `protobuf:"varint,9,opt,name=source_node_id,json=sourceNodeId,proto3" json:"source_node_id,omitempty"`
	DestNodeId    *int32                    `protobuf:"varint,10,opt,name=dest_node_id,json=destNodeId,proto3,oneof" json:"dest_node_id,omitempty"`
	ChannelId     *int64                    `protobuf:"varint,11,opt,name=channel_id,json=channelId,proto3,oneof" json:"channel_id,omitempty"`
	Private       bool                      `protobuf:"varint,12,opt,name=private,proto3" json:"private,omitempty"`
	JobId         string                    `protobuf:"bytes,13,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetChannelOperationRequestResponse) Reset() {
	*x = GetChannelOperationRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelOperationRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelOperationRequestResponse) ProtoMessage() {}

func (x *GetChannelOperationRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelOperationRequestResponse.ProtoReflect.Descriptor instead.
func (*GetChannelOperationRequestResponse) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{24}
}

func (x *GetChannelOperationRequestResponse) GetSatsAmount() int64 {
	if x != nil {
		return x.SatsAmount
	}
	return 0
}

func (x *GetChannelOperationRequestResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetChannelOperationRequestResponse) GetStatus() CHANNEL_OPERATION_STATUS {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return CHANNEL_OPERATION_STATUS_APPROVED
}

func (x *GetChannelOperationRequestResponse) GetType() CHANNEL_OPERATION_TYPE {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CHANNEL_OPERATION_TYPE_OPEN_CHANNEL
}

func (x *GetChannelOperationRequestResponse) GetTxId() string {
	if x != nil && x.TxId != nil {
		return *x.TxId
	}
	return ""
}

func (x *GetChannelOperationRequestResponse) GetClosingReason() string {
	if x != nil && x.ClosingReason != nil {
		return *x.ClosingReason
	}
	return ""
}

func (x *GetChannelOperationRequestResponse) GetFeeRate() float64 {
	if x != nil && x.FeeRate != nil {
		return *x.FeeRate
	}
	return 0
}

func (x *GetChannelOperationRequestResponse) GetWalletId() int32 {
	if x != nil && x.WalletId != nil {
		return *x.WalletId
	}
	return 0
}

func (x *GetChannelOperationRequestResponse) GetSourceNodeId() int32 {
	if x != nil {
		return x.SourceNodeId
	}
	return 0
}

func (x *GetChannelOperationRequestResponse) GetDestNodeId() int32 {
	if x != nil && x.DestNodeId != nil {
		return *x.DestNodeId
	}
	return 0
}

func (x *GetChannelOperationRequestResponse) GetChannelId() int64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *GetChannelOperationRequestResponse) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *GetChannelOperationRequestResponse) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type AddLiquidityRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Channel ID from NGs database
	ChannelId int32 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Wallet ID for swaps as stored in the NG's database
	SwapWalletId int32 `protobuf:"varint,2,opt,name=swap_wallet_id,json=swapWalletId,proto3" json:"swap_wallet_id,omitempty"`
	// Minimum local balance
	MinimumLocalBalance *float64 `protobuf:"fixed64,3,opt,name=minimum_local_balance,json=minimumLocalBalance,proto3,oneof" json:"minimum_local_balance,omitempty"`
	// Minimum remote balance
	MinimumRemoteBalance *float64 `protobuf:"fixed64,4,opt,name=minimum_remote_balance,json=minimumRemoteBalance,proto3,oneof" json:"minimum_remote_balance,omitempty"`
	// Rebalance target
	RebalanceTarget *float64 `protobuf:"fixed64,5,opt,name=rebalance_target,json=rebalanceTarget,proto3,oneof" json:"rebalance_target,omitempty"`
	// Whether this rule is for a wallet
	IsReverseSwapWalletRule bool `protobuf:"varint,6,opt,name=is_reverse_swap_wallet_rule,json=isReverseSwapWalletRule,proto3" json:"is_reverse_swap_wallet_rule,omitempty"`
	// Address to send the reverse swaps funds to
	ReverseSwapAddress *string `protobuf:"bytes,8,opt,name=reverse_swap_address,json=reverseSwapAddress,proto3,oneof" json:"reverse_swap_address,omitempty"`
	// Wallet ID for reverse swaps as stored in the NG's database
	ReverseSwapWalletId *int32 `protobuf:"varint,9,opt,name=reverse_swap_wallet_id,json=reverseSwapWalletId,proto3,oneof" json:"reverse_swap_wallet_id,omitempty"`
}

func (x *AddLiquidityRuleRequest) Reset() {
	*x = AddLiquidityRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLiquidityRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLiquidityRuleRequest) ProtoMessage() {}

func (x *AddLiquidityRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLiquidityRuleRequest.ProtoReflect.Descriptor instead.
func (*AddLiquidityRuleRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{25}
}

func (x *AddLiquidityRuleRequest) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *AddLiquidityRuleRequest) GetSwapWalletId() int32 {
	if x != nil {
		return x.SwapWalletId
	}
	return 0
}

func (x *AddLiquidityRuleRequest) GetMinimumLocalBalance() float64 {
	if x != nil && x.MinimumLocalBalance != nil {
		return *x.MinimumLocalBalance
	}
	return 0
}

func (x *AddLiquidityRuleRequest) GetMinimumRemoteBalance() float64 {
	if x != nil && x.MinimumRemoteBalance != nil {
		return *x.MinimumRemoteBalance
	}
	return 0
}

func (x *AddLiquidityRuleRequest) GetRebalanceTarget() float64 {
	if x != nil && x.RebalanceTarget != nil {
		return *x.RebalanceTarget
	}
	return 0
}

func (x *AddLiquidityRuleRequest) GetIsReverseSwapWalletRule() bool {
	if x != nil {
		return x.IsReverseSwapWalletRule
	}
	return false
}

func (x *AddLiquidityRuleRequest) GetReverseSwapAddress() string {
	if x != nil && x.ReverseSwapAddress != nil {
		return *x.ReverseSwapAddress
	}
	return ""
}

func (x *AddLiquidityRuleRequest) GetReverseSwapWalletId() int32 {
	if x != nil && x.ReverseSwapWalletId != nil {
		return *x.ReverseSwapWalletId
	}
	return 0
}

type AddLiquidityRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rule ID as stored in the NG's database
	RuleId int32 `protobuf:"varint,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
}

func (x *AddLiquidityRuleResponse) Reset() {
	*x = AddLiquidityRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLiquidityRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLiquidityRuleResponse) ProtoMessage() {}

func (x *AddLiquidityRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLiquidityRuleResponse.ProtoReflect.Descriptor instead.
func (*AddLiquidityRuleResponse) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{26}
}

func (x *AddLiquidityRuleResponse) GetRuleId() int32 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

type GetUtxosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUtxosRequest) Reset() {
	*x = GetUtxosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUtxosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUtxosRequest) ProtoMessage() {}

func (x *GetUtxosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUtxosRequest.ProtoReflect.Descriptor instead.
func (*GetUtxosRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{27}
}

type GetAvailableUtxosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Wallet ID as stored in the NG's database
	WalletId int32 `protobuf:"varint,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	// How to order the UTXOs for automatic selection
	Strategy *COIN_SELECTION_STRATEGY `protobuf:"varint,2,opt,name=strategy,proto3,enum=nodeguard.COIN_SELECTION_STRATEGY,oneof" json:"strategy,omitempty"`
	// How many UTXOs are allowed to be used for the withdrawal
	Limit *int32 `protobuf:"varint,3,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Amount in satoshis
	Amount *int64 `protobuf:"varint,4,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	// Order the UTXOs by closest to the amount specified if the strategy selected is CLOSEST_TO_TARGET_FIRST
	ClosestTo *int64 `protobuf:"varint,5,opt,name=closestTo,proto3,oneof" json:"closestTo,omitempty"`
}

func (x *GetAvailableUtxosRequest) Reset() {
	*x = GetAvailableUtxosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableUtxosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableUtxosRequest) ProtoMessage() {}

func (x *GetAvailableUtxosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableUtxosRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableUtxosRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{28}
}

func (x *GetAvailableUtxosRequest) GetWalletId() int32 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *GetAvailableUtxosRequest) GetStrategy() COIN_SELECTION_STRATEGY {
	if x != nil && x.Strategy != nil {
		return *x.Strategy
	}
	return COIN_SELECTION_STRATEGY_SMALLEST_FIRST
}

func (x *GetAvailableUtxosRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetAvailableUtxosRequest) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *GetAvailableUtxosRequest) GetClosestTo() int64 {
	if x != nil && x.ClosestTo != nil {
		return *x.ClosestTo
	}
	return 0
}

type Utxo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount   int64  `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Outpoint string `protobuf:"bytes,2,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	Address  string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Utxo) Reset() {
	*x = Utxo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utxo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utxo) ProtoMessage() {}

func (x *Utxo) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utxo.ProtoReflect.Descriptor instead.
func (*Utxo) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{29}
}

func (x *Utxo) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Utxo) GetOutpoint() string {
	if x != nil {
		return x.Outpoint
	}
	return ""
}

func (x *Utxo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetUtxosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Confirmed   []*Utxo `protobuf:"bytes,1,rep,name=confirmed,proto3" json:"confirmed,omitempty"`
	Unconfirmed []*Utxo `protobuf:"bytes,2,rep,name=unconfirmed,proto3" json:"unconfirmed,omitempty"`
}

func (x *GetUtxosResponse) Reset() {
	*x = GetUtxosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUtxosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUtxosResponse) ProtoMessage() {}

func (x *GetUtxosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUtxosResponse.ProtoReflect.Descriptor instead.
func (*GetUtxosResponse) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{30}
}

func (x *GetUtxosResponse) GetConfirmed() []*Utxo {
	if x != nil {
		return x.Confirmed
	}
	return nil
}

func (x *GetUtxosResponse) GetUnconfirmed() []*Utxo {
	if x != nil {
		return x.Unconfirmed
	}
	return nil
}

type GetWithdrawalsRequestStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestIds []int32 `protobuf:"varint,1,rep,packed,name=request_ids,json=requestIds,proto3" json:"request_ids,omitempty"`
}

func (x *GetWithdrawalsRequestStatusRequest) Reset() {
	*x = GetWithdrawalsRequestStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWithdrawalsRequestStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWithdrawalsRequestStatusRequest) ProtoMessage() {}

func (x *GetWithdrawalsRequestStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWithdrawalsRequestStatusRequest.ProtoReflect.Descriptor instead.
func (*GetWithdrawalsRequestStatusRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{31}
}

func (x *GetWithdrawalsRequestStatusRequest) GetRequestIds() []int32 {
	if x != nil {
		return x.RequestIds
	}
	return nil
}

type WithdrawalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId            int32                     `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Status               WITHDRAWAL_REQUEST_STATUS `protobuf:"varint,2,opt,name=status,proto3,enum=nodeguard.WITHDRAWAL_REQUEST_STATUS" json:"status,omitempty"`
	RejectOrCancelReason *string                   `protobuf:"bytes,3,opt,name=reject_or_cancel_reason,json=rejectOrCancelReason,proto3,oneof" json:"reject_or_cancel_reason,omitempty"`
	ReferenceId          *string                   `protobuf:"bytes,4,opt,name=reference_id,json=referenceId,proto3,oneof" json:"reference_id,omitempty"`
	Confirmations        uint64                    `protobuf:"varint,5,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	TxId                 *string                   `protobuf:"bytes,6,opt,name=tx_id,json=txId,proto3,oneof" json:"tx_id,omitempty"`
}

func (x *WithdrawalRequest) Reset() {
	*x = WithdrawalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalRequest) ProtoMessage() {}

func (x *WithdrawalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalRequest.ProtoReflect.Descriptor instead.
func (*WithdrawalRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{32}
}

func (x *WithdrawalRequest) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *WithdrawalRequest) GetStatus() WITHDRAWAL_REQUEST_STATUS {
	if x != nil {
		return x.Status
	}
	return WITHDRAWAL_REQUEST_STATUS_WITHDRAWAL_SETTLED
}

func (x *WithdrawalRequest) GetRejectOrCancelReason() string {
	if x != nil && x.RejectOrCancelReason != nil {
		return *x.RejectOrCancelReason
	}
	return ""
}

func (x *WithdrawalRequest) GetReferenceId() string {
	if x != nil && x.ReferenceId != nil {
		return *x.ReferenceId
	}
	return ""
}

func (x *WithdrawalRequest) GetConfirmations() uint64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *WithdrawalRequest) GetTxId() string {
	if x != nil && x.TxId != nil {
		return *x.TxId
	}
	return ""
}

type GetWithdrawalsRequestStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithdrawalRequests []*WithdrawalRequest `protobuf:"bytes,1,rep,name=withdrawal_requests,json=withdrawalRequests,proto3" json:"withdrawal_requests,omitempty"`
}

func (x *GetWithdrawalsRequestStatusResponse) Reset() {
	*x = GetWithdrawalsRequestStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWithdrawalsRequestStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWithdrawalsRequestStatusResponse) ProtoMessage() {}

func (x *GetWithdrawalsRequestStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWithdrawalsRequestStatusResponse.ProtoReflect.Descriptor instead.
func (*GetWithdrawalsRequestStatusResponse) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{33}
}

func (x *GetWithdrawalsRequestStatusResponse) GetWithdrawalRequests() []*WithdrawalRequest {
	if x != nil {
		return x.WithdrawalRequests
	}
	return nil
}

type GetWithdrawalsRequestStatusByReferenceIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceIds []string `protobuf:"bytes,1,rep,name=reference_ids,json=referenceIds,proto3" json:"reference_ids,omitempty"`
}

func (x *GetWithdrawalsRequestStatusByReferenceIdsRequest) Reset() {
	*x = GetWithdrawalsRequestStatusByReferenceIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWithdrawalsRequestStatusByReferenceIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWithdrawalsRequestStatusByReferenceIdsRequest) ProtoMessage() {}

func (x *GetWithdrawalsRequestStatusByReferenceIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWithdrawalsRequestStatusByReferenceIdsRequest.ProtoReflect.Descriptor instead.
func (*GetWithdrawalsRequestStatusByReferenceIdsRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{34}
}

func (x *GetWithdrawalsRequestStatusByReferenceIdsRequest) GetReferenceIds() []string {
	if x != nil {
		return x.ReferenceIds
	}
	return nil
}

type GetChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Channel ID from NGs database
	ChannelId int32 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *GetChannelRequest) Reset() {
	*x = GetChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelRequest) ProtoMessage() {}

func (x *GetChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelRequest.ProtoReflect.Descriptor instead.
func (*GetChannelRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{35}
}

func (x *GetChannelRequest) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type GetChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundingTx                   string         `protobuf:"bytes,1,opt,name=funding_tx,json=fundingTx,proto3" json:"funding_tx,omitempty"`
	OutputIndex                 uint32         `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	ChanId                      uint64         `protobuf:"varint,3,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	SatsAmount                  int64          `protobuf:"varint,4,opt,name=sats_amount,json=satsAmount,proto3" json:"sats_amount,omitempty"`
	BtcCloseAddress             *string        `protobuf:"bytes,5,opt,name=btc_close_address,json=btcCloseAddress,proto3,oneof" json:"btc_close_address,omitempty"`
	Status                      CHANNEL_STATUS `protobuf:"varint,6,opt,name=status,proto3,enum=nodeguard.CHANNEL_STATUS" json:"status,omitempty"`
	CreatedByNodeguard          bool           `protobuf:"varint,7,opt,name=created_by_nodeguard,json=createdByNodeguard,proto3" json:"created_by_nodeguard,omitempty"`
	IsAutomatedLiquidityEnabled bool           `protobuf:"varint,8,opt,name=is_automated_liquidity_enabled,json=isAutomatedLiquidityEnabled,proto3" json:"is_automated_liquidity_enabled,omitempty"`
	IsPrivate                   bool           `protobuf:"varint,9,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
}

func (x *GetChannelResponse) Reset() {
	*x = GetChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelResponse) ProtoMessage() {}

func (x *GetChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelResponse.ProtoReflect.Descriptor instead.
func (*GetChannelResponse) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{36}
}

func (x *GetChannelResponse) GetFundingTx() string {
	if x != nil {
		return x.FundingTx
	}
	return ""
}

func (x *GetChannelResponse) GetOutputIndex() uint32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *GetChannelResponse) GetChanId() uint64 {
	if x != nil {
		return x.ChanId
	}
	return 0
}

func (x *GetChannelResponse) GetSatsAmount() int64 {
	if x != nil {
		return x.SatsAmount
	}
	return 0
}

func (x *GetChannelResponse) GetBtcCloseAddress() string {
	if x != nil && x.BtcCloseAddress != nil {
		return *x.BtcCloseAddress
	}
	return ""
}

func (x *GetChannelResponse) GetStatus() CHANNEL_STATUS {
	if x != nil {
		return x.Status
	}
	return CHANNEL_STATUS_OPEN
}

func (x *GetChannelResponse) GetCreatedByNodeguard() bool {
	if x != nil {
		return x.CreatedByNodeguard
	}
	return false
}

func (x *GetChannelResponse) GetIsAutomatedLiquidityEnabled() bool {
	if x != nil {
		return x.IsAutomatedLiquidityEnabled
	}
	return false
}

func (x *GetChannelResponse) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value        string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	UtxoOutpoint string `protobuf:"bytes,3,opt,name=utxo_outpoint,json=utxoOutpoint,proto3" json:"utxo_outpoint,omitempty"` // Format txid-outputIndex
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{37}
}

func (x *Tag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Tag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Tag) GetUtxoOutpoint() string {
	if x != nil {
		return x.UtxoOutpoint
	}
	return ""
}

type AddTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*Tag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AddTagsRequest) Reset() {
	*x = AddTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagsRequest) ProtoMessage() {}

func (x *AddTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagsRequest.ProtoReflect.Descriptor instead.
func (*AddTagsRequest) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{38}
}

func (x *AddTagsRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AddTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTagsResponse) Reset() {
	*x = AddTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeguard_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagsResponse) ProtoMessage() {}

func (x *AddTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nodeguard_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagsResponse.ProtoReflect.Descriptor instead.
func (*AddTagsResponse) Descriptor() ([]byte, []int) {
	return file_nodeguard_proto_rawDescGZIP(), []int{39}
}

var File_nodeguard_proto protoreflect.FileDescriptor

var file_nodeguard_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x22, 0x3b, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x5e, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x9b, 0x04, 0x0a, 0x0d, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x77, 0x61, 0x70, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x16, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x15, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x35, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x53, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x22, 0x37, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x48, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x61, 0x74, 0x73, 0x22,
	0xfd, 0x03, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x74, 0x78, 0x6f, 0x73,
	0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x6d, 0x65, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x46, 0x45, 0x45, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22,
	0x72, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x48, 0x00,
	0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x28, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x70, 0x75, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x78, 0x70, 0x75, 0x62, 0x22, 0xbf, 0x01, 0x0a, 0x06, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68,
	0x6f, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x4f, 0x0a, 0x14,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x4a, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x36, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22,
	0x78, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x75, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x63,
	0x61, 0x72, 0x6f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x63, 0x61, 0x72, 0x6f, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x77, 0x65, 0x65, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x77,
	0x65, 0x65, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x75, 0x74, 0x6f, 0x73, 0x77, 0x65, 0x65, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x77, 0x65,
	0x65, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x75, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x22, 0x39, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x8c, 0x03, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x13,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x74,
	0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x61, 0x74, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x6c, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x75,
	0x74, 0x78, 0x6f, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a,
	0x10, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x46, 0x45, 0x45, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0e, 0x6d,
	0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x22, 0x56,
	0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x1c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0xfb, 0x04, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x74, 0x73, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x61,
	0x74, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x48, 0x01, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x63, 0x6c,
	0x6f, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x05, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0a,
	0x64, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x07, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0xaf,
	0x04, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x73, 0x77, 0x61, 0x70, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52,
	0x0f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x35, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x13, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x22, 0x33, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74,
	0x54, 0x6f, 0x22, 0x54, 0x0a, 0x04, 0x55, 0x74, 0x78, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x74, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55,
	0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x74, 0x78, 0x6f,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x75,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x74, 0x78,
	0x6f, 0x52, 0x0b, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x22, 0x45,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0xcb, 0x02, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41,
	0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x17, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x4f, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x78,
	0x5f, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x57, 0x0a, 0x30, 0x47, 0x65, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x73, 0x22, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xa0, 0x03, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x74, 0x73,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73,
	0x61, 0x74, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x62, 0x74, 0x63,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x74, 0x63, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x12,
	0x43, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62, 0x74, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x52, 0x0a, 0x03, 0x54, 0x61, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x74, 0x78, 0x6f,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x75, 0x74, 0x78, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x34, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x2a, 0x0a, 0x0b, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x48, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x4c, 0x44,
	0x10, 0x02, 0x2a, 0x5e, 0x0a, 0x09, 0x46, 0x45, 0x45, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x0f, 0x0a, 0x0b, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x53, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x55, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x5f, 0x46, 0x45, 0x45,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x45, 0x45,
	0x10, 0x04, 0x2a, 0xc9, 0x01, 0x0a, 0x18, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x53, 0x42, 0x54, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x4e, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x4e, 0x43, 0x48, 0x41, 0x49,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4e,
	0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x53, 0x42, 0x54, 0x10, 0x08, 0x2a, 0x3d,
	0x0a, 0x16, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x4e,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x01, 0x2a, 0x6f, 0x0a,
	0x17, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4d, 0x41, 0x4c,
	0x4c, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x42, 0x49, 0x47, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x55, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0xda,
	0x01, 0x0a, 0x19, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x16, 0x0a, 0x12,
	0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57,
	0x41, 0x4c, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x41, 0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x57, 0x49, 0x54, 0x48,
	0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57,
	0x41, 0x4c, 0x5f, 0x42, 0x55, 0x4d, 0x50, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x26, 0x0a, 0x0e, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x08, 0x0a,
	0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x01, 0x32, 0xbb, 0x0c, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x75, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x25, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x12, 0x23, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x22, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x74, 0x78, 0x6f, 0x73, 0x12, 0x23, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x74, 0x78,
	0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x55, 0x74, 0x78,
	0x6f, 0x73, 0x12, 0x1a, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x74,
	0x78, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x29, 0x47, 0x65,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x3b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x19, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nodeguard_proto_rawDescOnce sync.Once
	file_nodeguard_proto_rawDescData = file_nodeguard_proto_rawDesc
)

func file_nodeguard_proto_rawDescGZIP() []byte {
	file_nodeguard_proto_rawDescOnce.Do(func() {
		file_nodeguard_proto_rawDescData = protoimpl.X.CompressGZIP(file_nodeguard_proto_rawDescData)
	})
	return file_nodeguard_proto_rawDescData
}

var file_nodeguard_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_nodeguard_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_nodeguard_proto_goTypes = []any{
	(WALLET_TYPE)(0),                                         // 0: nodeguard.WALLET_TYPE
	(FEES_TYPE)(0),                                           // 1: nodeguard.FEES_TYPE
	(CHANNEL_OPERATION_STATUS)(0),                            // 2: nodeguard.CHANNEL_OPERATION_STATUS
	(CHANNEL_OPERATION_TYPE)(0),                              // 3: nodeguard.CHANNEL_OPERATION_TYPE
	(COIN_SELECTION_STRATEGY)(0),                             // 4: nodeguard.COIN_SELECTION_STRATEGY
	(WITHDRAWAL_REQUEST_STATUS)(0),                           // 5: nodeguard.WITHDRAWAL_REQUEST_STATUS
	(CHANNEL_STATUS)(0),                                      // 6: nodeguard.CHANNEL_STATUS
	(*GetLiquidityRulesRequest)(nil),                         // 7: nodeguard.GetLiquidityRulesRequest
	(*GetLiquidityRulesResponse)(nil),                        // 8: nodeguard.GetLiquidityRulesResponse
	(*LiquidityRule)(nil),                                    // 9: nodeguard.LiquidityRule
	(*GetNewWalletAddressRequest)(nil),                       // 10: nodeguard.GetNewWalletAddressRequest
	(*GetNewWalletAddressResponse)(nil),                      // 11: nodeguard.GetNewWalletAddressResponse
	(*Destination)(nil),                                      // 12: nodeguard.Destination
	(*RequestWithdrawalRequest)(nil),                         // 13: nodeguard.RequestWithdrawalRequest
	(*RequestWithdrawalResponse)(nil),                        // 14: nodeguard.RequestWithdrawalResponse
	(*GetAvailableWalletsRequest)(nil),                       // 15: nodeguard.GetAvailableWalletsRequest
	(*AccountKeySettings)(nil),                               // 16: nodeguard.AccountKeySettings
	(*Wallet)(nil),                                           // 17: nodeguard.Wallet
	(*GetAvailableWalletsResponse)(nil),                      // 18: nodeguard.GetAvailableWalletsResponse
	(*GetWalletBalanceRequest)(nil),                          // 19: nodeguard.GetWalletBalanceRequest
	(*GetWalletBalanceResponse)(nil),                         // 20: nodeguard.GetWalletBalanceResponse
	(*AddNodeRequest)(nil),                                   // 21: nodeguard.AddNodeRequest
	(*AddNodeResponse)(nil),                                  // 22: nodeguard.AddNodeResponse
	(*Node)(nil),                                             // 23: nodeguard.Node
	(*GetNodesRequest)(nil),                                  // 24: nodeguard.GetNodesRequest
	(*GetNodesResponse)(nil),                                 // 25: nodeguard.GetNodesResponse
	(*OpenChannelRequest)(nil),                               // 26: nodeguard.OpenChannelRequest
	(*OpenChannelResponse)(nil),                              // 27: nodeguard.OpenChannelResponse
	(*CloseChannelRequest)(nil),                              // 28: nodeguard.CloseChannelRequest
	(*CloseChannelResponse)(nil),                             // 29: nodeguard.CloseChannelResponse
	(*GetChannelOperationRequestRequest)(nil),                // 30: nodeguard.GetChannelOperationRequestRequest
	(*GetChannelOperationRequestResponse)(nil),               // 31: nodeguard.GetChannelOperationRequestResponse
	(*AddLiquidityRuleRequest)(nil),                          // 32: nodeguard.AddLiquidityRuleRequest
	(*AddLiquidityRuleResponse)(nil),                         // 33: nodeguard.AddLiquidityRuleResponse
	(*GetUtxosRequest)(nil),                                  // 34: nodeguard.GetUtxosRequest
	(*GetAvailableUtxosRequest)(nil),                         // 35: nodeguard.GetAvailableUtxosRequest
	(*Utxo)(nil),                                             // 36: nodeguard.Utxo
	(*GetUtxosResponse)(nil),                                 // 37: nodeguard.GetUtxosResponse
	(*GetWithdrawalsRequestStatusRequest)(nil),               // 38: nodeguard.GetWithdrawalsRequestStatusRequest
	(*WithdrawalRequest)(nil),                                // 39: nodeguard.WithdrawalRequest
	(*GetWithdrawalsRequestStatusResponse)(nil),              // 40: nodeguard.GetWithdrawalsRequestStatusResponse
	(*GetWithdrawalsRequestStatusByReferenceIdsRequest)(nil), // 41: nodeguard.GetWithdrawalsRequestStatusByReferenceIdsRequest
	(*GetChannelRequest)(nil),                                // 42: nodeguard.GetChannelRequest
	(*GetChannelResponse)(nil),                               // 43: nodeguard.GetChannelResponse
	(*Tag)(nil),                                              // 44: nodeguard.Tag
	(*AddTagsRequest)(nil),                                   // 45: nodeguard.AddTagsRequest
	(*AddTagsResponse)(nil),                                  // 46: nodeguard.AddTagsResponse
}
var file_nodeguard_proto_depIdxs = []int32{
	9,  // 0: nodeguard.GetLiquidityRulesResponse.liquidity_rules:type_name -> nodeguard.LiquidityRule
	1,  // 1: nodeguard.RequestWithdrawalRequest.mempool_fee_rate:type_name -> nodeguard.FEES_TYPE
	12, // 2: nodeguard.RequestWithdrawalRequest.destinations:type_name -> nodeguard.Destination
	0,  // 3: nodeguard.GetAvailableWalletsRequest.wallet_type:type_name -> nodeguard.WALLET_TYPE
	16, // 4: nodeguard.Wallet.account_key_settings:type_name -> nodeguard.AccountKeySettings
	17, // 5: nodeguard.GetAvailableWalletsResponse.wallets:type_name -> nodeguard.Wallet
	23, // 6: nodeguard.GetNodesResponse.nodes:type_name -> nodeguard.Node
	1,  // 7: nodeguard.OpenChannelRequest.mempool_fee_rate:type_name -> nodeguard.FEES_TYPE
	2,  // 8: nodeguard.GetChannelOperationRequestResponse.status:type_name -> nodeguard.CHANNEL_OPERATION_STATUS
	3,  // 9: nodeguard.GetChannelOperationRequestResponse.type:type_name -> nodeguard.CHANNEL_OPERATION_TYPE
	4,  // 10: nodeguard.GetAvailableUtxosRequest.strategy:type_name -> nodeguard.COIN_SELECTION_STRATEGY
	36, // 11: nodeguard.GetUtxosResponse.confirmed:type_name -> nodeguard.Utxo
	36, // 12: nodeguard.GetUtxosResponse.unconfirmed:type_name -> nodeguard.Utxo
	5,  // 13: nodeguard.WithdrawalRequest.status:type_name -> nodeguard.WITHDRAWAL_REQUEST_STATUS
	39, // 14: nodeguard.GetWithdrawalsRequestStatusResponse.withdrawal_requests:type_name -> nodeguard.WithdrawalRequest
	6,  // 15: nodeguard.GetChannelResponse.status:type_name -> nodeguard.CHANNEL_STATUS
	44, // 16: nodeguard.AddTagsRequest.tags:type_name -> nodeguard.Tag
	7,  // 17: nodeguard.NodeGuardService.GetLiquidityRules:input_type -> nodeguard.GetLiquidityRulesRequest
	10, // 18: nodeguard.NodeGuardService.GetNewWalletAddress:input_type -> nodeguard.GetNewWalletAddressRequest
	13, // 19: nodeguard.NodeGuardService.RequestWithdrawal:input_type -> nodeguard.RequestWithdrawalRequest
	21, // 20: nodeguard.NodeGuardService.AddNode:input_type -> nodeguard.AddNodeRequest
	24, // 21: nodeguard.NodeGuardService.GetNodes:input_type -> nodeguard.GetNodesRequest
	15, // 22: nodeguard.NodeGuardService.GetAvailableWallets:input_type -> nodeguard.GetAvailableWalletsRequest
	19, // 23: nodeguard.NodeGuardService.GetWalletBalance:input_type -> nodeguard.GetWalletBalanceRequest
	26, // 24: nodeguard.NodeGuardService.OpenChannel:input_type -> nodeguard.OpenChannelRequest
	28, // 25: nodeguard.NodeGuardService.CloseChannel:input_type -> nodeguard.CloseChannelRequest
	30, // 26: nodeguard.NodeGuardService.GetChannelOperationRequest:input_type -> nodeguard.GetChannelOperationRequestRequest
	32, // 27: nodeguard.NodeGuardService.AddLiquidityRule:input_type -> nodeguard.AddLiquidityRuleRequest
	35, // 28: nodeguard.NodeGuardService.GetAvailableUtxos:input_type -> nodeguard.GetAvailableUtxosRequest
	34, // 29: nodeguard.NodeGuardService.GetUtxos:input_type -> nodeguard.GetUtxosRequest
	38, // 30: nodeguard.NodeGuardService.GetWithdrawalsRequestStatus:input_type -> nodeguard.GetWithdrawalsRequestStatusRequest
	41, // 31: nodeguard.NodeGuardService.GetWithdrawalsRequestStatusByReferenceIds:input_type -> nodeguard.GetWithdrawalsRequestStatusByReferenceIdsRequest
	42, // 32: nodeguard.NodeGuardService.GetChannel:input_type -> nodeguard.GetChannelRequest
	45, // 33: nodeguard.NodeGuardService.AddTags:input_type -> nodeguard.AddTagsRequest
	8,  // 34: nodeguard.NodeGuardService.GetLiquidityRules:output_type -> nodeguard.GetLiquidityRulesResponse
	11, // 35: nodeguard.NodeGuardService.GetNewWalletAddress:output_type -> nodeguard.GetNewWalletAddressResponse
	14, // 36: nodeguard.NodeGuardService.RequestWithdrawal:output_type -> nodeguard.RequestWithdrawalResponse
	22, // 37: nodeguard.NodeGuardService.AddNode:output_type -> nodeguard.AddNodeResponse
	25, // 38: nodeguard.NodeGuardService.GetNodes:output_type -> nodeguard.GetNodesResponse
	18, // 39: nodeguard.NodeGuardService.GetAvailableWallets:output_type -> nodeguard.GetAvailableWalletsResponse
	20, // 40: nodeguard.NodeGuardService.GetWalletBalance:output_type -> nodeguard.GetWalletBalanceResponse
	27, // 41: nodeguard.NodeGuardService.OpenChannel:output_type -> nodeguard.OpenChannelResponse
	29, // 42: nodeguard.NodeGuardService.CloseChannel:output_type -> nodeguard.CloseChannelResponse
	31, // 43: nodeguard.NodeGuardService.GetChannelOperationRequest:output_type -> nodeguard.GetChannelOperationRequestResponse
	33, // 44: nodeguard.NodeGuardService.AddLiquidityRule:output_type -> nodeguard.AddLiquidityRuleResponse
	37, // 45: nodeguard.NodeGuardService.GetAvailableUtxos:output_type -> nodeguard.GetUtxosResponse
	37, // 46: nodeguard.NodeGuardService.GetUtxos:output_type -> nodeguard.GetUtxosResponse
	40, // 47: nodeguard.NodeGuardService.GetWithdrawalsRequestStatus:output_type -> nodeguard.GetWithdrawalsRequestStatusResponse
	40, // 48: nodeguard.NodeGuardService.GetWithdrawalsRequestStatusByReferenceIds:output_type -> nodeguard.GetWithdrawalsRequestStatusResponse
	43, // 49: nodeguard.NodeGuardService.GetChannel:output_type -> nodeguard.GetChannelResponse
	46, // 50: nodeguard.NodeGuardService.AddTags:output_type -> nodeguard.AddTagsResponse
	34, // [34:51] is the sub-list for method output_type
	17, // [17:34] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_nodeguard_proto_init() }
func file_nodeguard_proto_init() {
	if File_nodeguard_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nodeguard_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetLiquidityRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetLiquidityRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*LiquidityRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetNewWalletAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetNewWalletAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RequestWithdrawalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*RequestWithdrawalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetAvailableWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AccountKeySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Wallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetAvailableWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetWalletBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetWalletBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AddNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*AddNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*OpenChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*OpenChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CloseChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CloseChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GetChannelOperationRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*GetChannelOperationRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*AddLiquidityRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*AddLiquidityRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GetUtxosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetAvailableUtxosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*Utxo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GetUtxosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*GetWithdrawalsRequestStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*WithdrawalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*GetWithdrawalsRequestStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GetWithdrawalsRequestStatusByReferenceIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GetChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GetChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*AddTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeguard_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*AddTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nodeguard_proto_msgTypes[2].OneofWrappers = []any{}
	file_nodeguard_proto_msgTypes[6].OneofWrappers = []any{}
	file_nodeguard_proto_msgTypes[8].OneofWrappers = []any{}
	file_nodeguard_proto_msgTypes[19].OneofWrappers = []any{}
	file_nodeguard_proto_msgTypes[24].OneofWrappers = []any{}
	file_nodeguard_proto_msgTypes[25].OneofWrappers = []any{}
	file_nodeguard_proto_msgTypes[28].OneofWrappers = []any{}
	file_nodeguard_proto_msgTypes[32].OneofWrappers = []any{}
	file_nodeguard_proto_msgTypes[36].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nodeguard_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nodeguard_proto_goTypes,
		DependencyIndexes: file_nodeguard_proto_depIdxs,
		EnumInfos:         file_nodeguard_proto_enumTypes,
		MessageInfos:      file_nodeguard_proto_msgTypes,
	}.Build()
	File_nodeguard_proto = out.File
	file_nodeguard_proto_rawDesc = nil
	file_nodeguard_proto_goTypes = nil
	file_nodeguard_proto_depIdxs = nil
}
