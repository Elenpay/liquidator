// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: nodeguard.proto

package nodeguard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeGuardServiceClient is the client API for NodeGuardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeGuardServiceClient interface {
	// Returns the liquidity rules associated to a node and its channels
	GetLiquidityRules(ctx context.Context, in *GetLiquidityRulesRequest, opts ...grpc.CallOption) (*GetLiquidityRulesResponse, error)
	// Returns a new unused BTC Address of a given wallet
	GetNewWalletAddress(ctx context.Context, in *GetNewWalletAddressRequest, opts ...grpc.CallOption) (*GetNewWalletAddressResponse, error)
	// Withdraws funds from a given wallet to a given address
	RequestWithdrawal(ctx context.Context, in *RequestWithdrawalRequest, opts ...grpc.CallOption) (*RequestWithdrawalResponse, error)
}

type nodeGuardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeGuardServiceClient(cc grpc.ClientConnInterface) NodeGuardServiceClient {
	return &nodeGuardServiceClient{cc}
}

func (c *nodeGuardServiceClient) GetLiquidityRules(ctx context.Context, in *GetLiquidityRulesRequest, opts ...grpc.CallOption) (*GetLiquidityRulesResponse, error) {
	out := new(GetLiquidityRulesResponse)
	err := c.cc.Invoke(ctx, "/nodeguard.NodeGuardService/GetLiquidityRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) GetNewWalletAddress(ctx context.Context, in *GetNewWalletAddressRequest, opts ...grpc.CallOption) (*GetNewWalletAddressResponse, error) {
	out := new(GetNewWalletAddressResponse)
	err := c.cc.Invoke(ctx, "/nodeguard.NodeGuardService/GetNewWalletAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) RequestWithdrawal(ctx context.Context, in *RequestWithdrawalRequest, opts ...grpc.CallOption) (*RequestWithdrawalResponse, error) {
	out := new(RequestWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/nodeguard.NodeGuardService/RequestWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeGuardServiceServer is the server API for NodeGuardService service.
// All implementations must embed UnimplementedNodeGuardServiceServer
// for forward compatibility
type NodeGuardServiceServer interface {
	// Returns the liquidity rules associated to a node and its channels
	GetLiquidityRules(context.Context, *GetLiquidityRulesRequest) (*GetLiquidityRulesResponse, error)
	// Returns a new unused BTC Address of a given wallet
	GetNewWalletAddress(context.Context, *GetNewWalletAddressRequest) (*GetNewWalletAddressResponse, error)
	// Withdraws funds from a given wallet to a given address
	RequestWithdrawal(context.Context, *RequestWithdrawalRequest) (*RequestWithdrawalResponse, error)
	mustEmbedUnimplementedNodeGuardServiceServer()
}

// UnimplementedNodeGuardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeGuardServiceServer struct {
}

func (UnimplementedNodeGuardServiceServer) GetLiquidityRules(context.Context, *GetLiquidityRulesRequest) (*GetLiquidityRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiquidityRules not implemented")
}
func (UnimplementedNodeGuardServiceServer) GetNewWalletAddress(context.Context, *GetNewWalletAddressRequest) (*GetNewWalletAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewWalletAddress not implemented")
}
func (UnimplementedNodeGuardServiceServer) RequestWithdrawal(context.Context, *RequestWithdrawalRequest) (*RequestWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestWithdrawal not implemented")
}
func (UnimplementedNodeGuardServiceServer) mustEmbedUnimplementedNodeGuardServiceServer() {}

// UnsafeNodeGuardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeGuardServiceServer will
// result in compilation errors.
type UnsafeNodeGuardServiceServer interface {
	mustEmbedUnimplementedNodeGuardServiceServer()
}

func RegisterNodeGuardServiceServer(s grpc.ServiceRegistrar, srv NodeGuardServiceServer) {
	s.RegisterService(&NodeGuardService_ServiceDesc, srv)
}

func _NodeGuardService_GetLiquidityRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiquidityRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).GetLiquidityRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeguard.NodeGuardService/GetLiquidityRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).GetLiquidityRules(ctx, req.(*GetLiquidityRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_GetNewWalletAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewWalletAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).GetNewWalletAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeguard.NodeGuardService/GetNewWalletAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).GetNewWalletAddress(ctx, req.(*GetNewWalletAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_RequestWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).RequestWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeguard.NodeGuardService/RequestWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).RequestWithdrawal(ctx, req.(*RequestWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeGuardService_ServiceDesc is the grpc.ServiceDesc for NodeGuardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeGuardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodeguard.NodeGuardService",
	HandlerType: (*NodeGuardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLiquidityRules",
			Handler:    _NodeGuardService_GetLiquidityRules_Handler,
		},
		{
			MethodName: "GetNewWalletAddress",
			Handler:    _NodeGuardService_GetNewWalletAddress_Handler,
		},
		{
			MethodName: "RequestWithdrawal",
			Handler:    _NodeGuardService_RequestWithdrawal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodeguard.proto",
}
