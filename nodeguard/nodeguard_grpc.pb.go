// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: nodeguard.proto

package nodeguard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	NodeGuardService_GetLiquidityRules_FullMethodName                         = "/nodeguard.NodeGuardService/GetLiquidityRules"
	NodeGuardService_GetNewWalletAddress_FullMethodName                       = "/nodeguard.NodeGuardService/GetNewWalletAddress"
	NodeGuardService_RequestWithdrawal_FullMethodName                         = "/nodeguard.NodeGuardService/RequestWithdrawal"
	NodeGuardService_AddNode_FullMethodName                                   = "/nodeguard.NodeGuardService/AddNode"
	NodeGuardService_GetNodes_FullMethodName                                  = "/nodeguard.NodeGuardService/GetNodes"
	NodeGuardService_GetAvailableWallets_FullMethodName                       = "/nodeguard.NodeGuardService/GetAvailableWallets"
	NodeGuardService_GetWalletBalance_FullMethodName                          = "/nodeguard.NodeGuardService/GetWalletBalance"
	NodeGuardService_OpenChannel_FullMethodName                               = "/nodeguard.NodeGuardService/OpenChannel"
	NodeGuardService_CloseChannel_FullMethodName                              = "/nodeguard.NodeGuardService/CloseChannel"
	NodeGuardService_GetChannelOperationRequest_FullMethodName                = "/nodeguard.NodeGuardService/GetChannelOperationRequest"
	NodeGuardService_AddLiquidityRule_FullMethodName                          = "/nodeguard.NodeGuardService/AddLiquidityRule"
	NodeGuardService_GetAvailableUtxos_FullMethodName                         = "/nodeguard.NodeGuardService/GetAvailableUtxos"
	NodeGuardService_GetUtxos_FullMethodName                                  = "/nodeguard.NodeGuardService/GetUtxos"
	NodeGuardService_GetWithdrawalsRequestStatus_FullMethodName               = "/nodeguard.NodeGuardService/GetWithdrawalsRequestStatus"
	NodeGuardService_GetWithdrawalsRequestStatusByReferenceIds_FullMethodName = "/nodeguard.NodeGuardService/GetWithdrawalsRequestStatusByReferenceIds"
	NodeGuardService_GetChannel_FullMethodName                                = "/nodeguard.NodeGuardService/GetChannel"
	NodeGuardService_AddTags_FullMethodName                                   = "/nodeguard.NodeGuardService/AddTags"
)

// NodeGuardServiceClient is the client API for NodeGuardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeGuardServiceClient interface {
	// Returns the liquidity rules associated to a node and its channels
	GetLiquidityRules(ctx context.Context, in *GetLiquidityRulesRequest, opts ...grpc.CallOption) (*GetLiquidityRulesResponse, error)
	// Returns a new unused BTC Address of a given wallet
	GetNewWalletAddress(ctx context.Context, in *GetNewWalletAddressRequest, opts ...grpc.CallOption) (*GetNewWalletAddressResponse, error)
	// Withdraws funds from a given wallet to a given address
	RequestWithdrawal(ctx context.Context, in *RequestWithdrawalRequest, opts ...grpc.CallOption) (*RequestWithdrawalResponse, error)
	// Adds a new node to the nodeguard
	AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*AddNodeResponse, error)
	// Gets a list of nodes
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
	// Gets a list of available wallets
	GetAvailableWallets(ctx context.Context, in *GetAvailableWalletsRequest, opts ...grpc.CallOption) (*GetAvailableWalletsResponse, error)
	// Get balance from a specific wallet
	GetWalletBalance(ctx context.Context, in *GetWalletBalanceRequest, opts ...grpc.CallOption) (*GetWalletBalanceResponse, error)
	// Opens a channel to a given node
	OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelResponse, error)
	// Closes a channel to a given node
	CloseChannel(ctx context.Context, in *CloseChannelRequest, opts ...grpc.CallOption) (*CloseChannelResponse, error)
	// Gets a list of channel operations requests by id
	GetChannelOperationRequest(ctx context.Context, in *GetChannelOperationRequestRequest, opts ...grpc.CallOption) (*GetChannelOperationRequestResponse, error)
	// Adds a liquidity rule to a channel
	AddLiquidityRule(ctx context.Context, in *AddLiquidityRuleRequest, opts ...grpc.CallOption) (*AddLiquidityRuleResponse, error)
	// Gets a list of available UTXOs for a single wallet
	GetAvailableUtxos(ctx context.Context, in *GetAvailableUtxosRequest, opts ...grpc.CallOption) (*GetUtxosResponse, error)
	// Gets a list of all UTXOs from all available wallets
	GetUtxos(ctx context.Context, in *GetUtxosRequest, opts ...grpc.CallOption) (*GetUtxosResponse, error)
	// Gets the status for the provided withdrawals request ids
	GetWithdrawalsRequestStatus(ctx context.Context, in *GetWithdrawalsRequestStatusRequest, opts ...grpc.CallOption) (*GetWithdrawalsRequestStatusResponse, error)
	// Gets the status for the provided withdrawals request reference ids
	GetWithdrawalsRequestStatusByReferenceIds(ctx context.Context, in *GetWithdrawalsRequestStatusByReferenceIdsRequest, opts ...grpc.CallOption) (*GetWithdrawalsRequestStatusResponse, error)
	// Gets a channel by id
	GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error)
	// Adds tags to UTXOs under the treasury
	AddTags(ctx context.Context, in *AddTagsRequest, opts ...grpc.CallOption) (*AddTagsResponse, error)
}

type nodeGuardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeGuardServiceClient(cc grpc.ClientConnInterface) NodeGuardServiceClient {
	return &nodeGuardServiceClient{cc}
}

func (c *nodeGuardServiceClient) GetLiquidityRules(ctx context.Context, in *GetLiquidityRulesRequest, opts ...grpc.CallOption) (*GetLiquidityRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLiquidityRulesResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_GetLiquidityRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) GetNewWalletAddress(ctx context.Context, in *GetNewWalletAddressRequest, opts ...grpc.CallOption) (*GetNewWalletAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNewWalletAddressResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_GetNewWalletAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) RequestWithdrawal(ctx context.Context, in *RequestWithdrawalRequest, opts ...grpc.CallOption) (*RequestWithdrawalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestWithdrawalResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_RequestWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*AddNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddNodeResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_AddNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_GetNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) GetAvailableWallets(ctx context.Context, in *GetAvailableWalletsRequest, opts ...grpc.CallOption) (*GetAvailableWalletsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableWalletsResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_GetAvailableWallets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) GetWalletBalance(ctx context.Context, in *GetWalletBalanceRequest, opts ...grpc.CallOption) (*GetWalletBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletBalanceResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_GetWalletBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) OpenChannel(ctx context.Context, in *OpenChannelRequest, opts ...grpc.CallOption) (*OpenChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenChannelResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_OpenChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) CloseChannel(ctx context.Context, in *CloseChannelRequest, opts ...grpc.CallOption) (*CloseChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseChannelResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_CloseChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) GetChannelOperationRequest(ctx context.Context, in *GetChannelOperationRequestRequest, opts ...grpc.CallOption) (*GetChannelOperationRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelOperationRequestResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_GetChannelOperationRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) AddLiquidityRule(ctx context.Context, in *AddLiquidityRuleRequest, opts ...grpc.CallOption) (*AddLiquidityRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddLiquidityRuleResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_AddLiquidityRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) GetAvailableUtxos(ctx context.Context, in *GetAvailableUtxosRequest, opts ...grpc.CallOption) (*GetUtxosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUtxosResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_GetAvailableUtxos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) GetUtxos(ctx context.Context, in *GetUtxosRequest, opts ...grpc.CallOption) (*GetUtxosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUtxosResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_GetUtxos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) GetWithdrawalsRequestStatus(ctx context.Context, in *GetWithdrawalsRequestStatusRequest, opts ...grpc.CallOption) (*GetWithdrawalsRequestStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWithdrawalsRequestStatusResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_GetWithdrawalsRequestStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) GetWithdrawalsRequestStatusByReferenceIds(ctx context.Context, in *GetWithdrawalsRequestStatusByReferenceIdsRequest, opts ...grpc.CallOption) (*GetWithdrawalsRequestStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWithdrawalsRequestStatusResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_GetWithdrawalsRequestStatusByReferenceIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_GetChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGuardServiceClient) AddTags(ctx context.Context, in *AddTagsRequest, opts ...grpc.CallOption) (*AddTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTagsResponse)
	err := c.cc.Invoke(ctx, NodeGuardService_AddTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeGuardServiceServer is the server API for NodeGuardService service.
// All implementations must embed UnimplementedNodeGuardServiceServer
// for forward compatibility
type NodeGuardServiceServer interface {
	// Returns the liquidity rules associated to a node and its channels
	GetLiquidityRules(context.Context, *GetLiquidityRulesRequest) (*GetLiquidityRulesResponse, error)
	// Returns a new unused BTC Address of a given wallet
	GetNewWalletAddress(context.Context, *GetNewWalletAddressRequest) (*GetNewWalletAddressResponse, error)
	// Withdraws funds from a given wallet to a given address
	RequestWithdrawal(context.Context, *RequestWithdrawalRequest) (*RequestWithdrawalResponse, error)
	// Adds a new node to the nodeguard
	AddNode(context.Context, *AddNodeRequest) (*AddNodeResponse, error)
	// Gets a list of nodes
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
	// Gets a list of available wallets
	GetAvailableWallets(context.Context, *GetAvailableWalletsRequest) (*GetAvailableWalletsResponse, error)
	// Get balance from a specific wallet
	GetWalletBalance(context.Context, *GetWalletBalanceRequest) (*GetWalletBalanceResponse, error)
	// Opens a channel to a given node
	OpenChannel(context.Context, *OpenChannelRequest) (*OpenChannelResponse, error)
	// Closes a channel to a given node
	CloseChannel(context.Context, *CloseChannelRequest) (*CloseChannelResponse, error)
	// Gets a list of channel operations requests by id
	GetChannelOperationRequest(context.Context, *GetChannelOperationRequestRequest) (*GetChannelOperationRequestResponse, error)
	// Adds a liquidity rule to a channel
	AddLiquidityRule(context.Context, *AddLiquidityRuleRequest) (*AddLiquidityRuleResponse, error)
	// Gets a list of available UTXOs for a single wallet
	GetAvailableUtxos(context.Context, *GetAvailableUtxosRequest) (*GetUtxosResponse, error)
	// Gets a list of all UTXOs from all available wallets
	GetUtxos(context.Context, *GetUtxosRequest) (*GetUtxosResponse, error)
	// Gets the status for the provided withdrawals request ids
	GetWithdrawalsRequestStatus(context.Context, *GetWithdrawalsRequestStatusRequest) (*GetWithdrawalsRequestStatusResponse, error)
	// Gets the status for the provided withdrawals request reference ids
	GetWithdrawalsRequestStatusByReferenceIds(context.Context, *GetWithdrawalsRequestStatusByReferenceIdsRequest) (*GetWithdrawalsRequestStatusResponse, error)
	// Gets a channel by id
	GetChannel(context.Context, *GetChannelRequest) (*GetChannelResponse, error)
	// Adds tags to UTXOs under the treasury
	AddTags(context.Context, *AddTagsRequest) (*AddTagsResponse, error)
	mustEmbedUnimplementedNodeGuardServiceServer()
}

// UnimplementedNodeGuardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeGuardServiceServer struct {
}

func (UnimplementedNodeGuardServiceServer) GetLiquidityRules(context.Context, *GetLiquidityRulesRequest) (*GetLiquidityRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiquidityRules not implemented")
}
func (UnimplementedNodeGuardServiceServer) GetNewWalletAddress(context.Context, *GetNewWalletAddressRequest) (*GetNewWalletAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewWalletAddress not implemented")
}
func (UnimplementedNodeGuardServiceServer) RequestWithdrawal(context.Context, *RequestWithdrawalRequest) (*RequestWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestWithdrawal not implemented")
}
func (UnimplementedNodeGuardServiceServer) AddNode(context.Context, *AddNodeRequest) (*AddNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedNodeGuardServiceServer) GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedNodeGuardServiceServer) GetAvailableWallets(context.Context, *GetAvailableWalletsRequest) (*GetAvailableWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableWallets not implemented")
}
func (UnimplementedNodeGuardServiceServer) GetWalletBalance(context.Context, *GetWalletBalanceRequest) (*GetWalletBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletBalance not implemented")
}
func (UnimplementedNodeGuardServiceServer) OpenChannel(context.Context, *OpenChannelRequest) (*OpenChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenChannel not implemented")
}
func (UnimplementedNodeGuardServiceServer) CloseChannel(context.Context, *CloseChannelRequest) (*CloseChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseChannel not implemented")
}
func (UnimplementedNodeGuardServiceServer) GetChannelOperationRequest(context.Context, *GetChannelOperationRequestRequest) (*GetChannelOperationRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelOperationRequest not implemented")
}
func (UnimplementedNodeGuardServiceServer) AddLiquidityRule(context.Context, *AddLiquidityRuleRequest) (*AddLiquidityRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLiquidityRule not implemented")
}
func (UnimplementedNodeGuardServiceServer) GetAvailableUtxos(context.Context, *GetAvailableUtxosRequest) (*GetUtxosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableUtxos not implemented")
}
func (UnimplementedNodeGuardServiceServer) GetUtxos(context.Context, *GetUtxosRequest) (*GetUtxosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUtxos not implemented")
}
func (UnimplementedNodeGuardServiceServer) GetWithdrawalsRequestStatus(context.Context, *GetWithdrawalsRequestStatusRequest) (*GetWithdrawalsRequestStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawalsRequestStatus not implemented")
}
func (UnimplementedNodeGuardServiceServer) GetWithdrawalsRequestStatusByReferenceIds(context.Context, *GetWithdrawalsRequestStatusByReferenceIdsRequest) (*GetWithdrawalsRequestStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawalsRequestStatusByReferenceIds not implemented")
}
func (UnimplementedNodeGuardServiceServer) GetChannel(context.Context, *GetChannelRequest) (*GetChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedNodeGuardServiceServer) AddTags(context.Context, *AddTagsRequest) (*AddTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTags not implemented")
}
func (UnimplementedNodeGuardServiceServer) mustEmbedUnimplementedNodeGuardServiceServer() {}

// UnsafeNodeGuardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeGuardServiceServer will
// result in compilation errors.
type UnsafeNodeGuardServiceServer interface {
	mustEmbedUnimplementedNodeGuardServiceServer()
}

func RegisterNodeGuardServiceServer(s grpc.ServiceRegistrar, srv NodeGuardServiceServer) {
	s.RegisterService(&NodeGuardService_ServiceDesc, srv)
}

func _NodeGuardService_GetLiquidityRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiquidityRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).GetLiquidityRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_GetLiquidityRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).GetLiquidityRules(ctx, req.(*GetLiquidityRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_GetNewWalletAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewWalletAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).GetNewWalletAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_GetNewWalletAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).GetNewWalletAddress(ctx, req.(*GetNewWalletAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_RequestWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).RequestWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_RequestWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).RequestWithdrawal(ctx, req.(*RequestWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_AddNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).AddNode(ctx, req.(*AddNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_GetNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_GetAvailableWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).GetAvailableWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_GetAvailableWallets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).GetAvailableWallets(ctx, req.(*GetAvailableWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_GetWalletBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).GetWalletBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_GetWalletBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).GetWalletBalance(ctx, req.(*GetWalletBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_OpenChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).OpenChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_OpenChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).OpenChannel(ctx, req.(*OpenChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_CloseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).CloseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_CloseChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).CloseChannel(ctx, req.(*CloseChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_GetChannelOperationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelOperationRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).GetChannelOperationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_GetChannelOperationRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).GetChannelOperationRequest(ctx, req.(*GetChannelOperationRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_AddLiquidityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLiquidityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).AddLiquidityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_AddLiquidityRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).AddLiquidityRule(ctx, req.(*AddLiquidityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_GetAvailableUtxos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableUtxosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).GetAvailableUtxos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_GetAvailableUtxos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).GetAvailableUtxos(ctx, req.(*GetAvailableUtxosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_GetUtxos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUtxosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).GetUtxos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_GetUtxos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).GetUtxos(ctx, req.(*GetUtxosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_GetWithdrawalsRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawalsRequestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).GetWithdrawalsRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_GetWithdrawalsRequestStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).GetWithdrawalsRequestStatus(ctx, req.(*GetWithdrawalsRequestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_GetWithdrawalsRequestStatusByReferenceIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawalsRequestStatusByReferenceIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).GetWithdrawalsRequestStatusByReferenceIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_GetWithdrawalsRequestStatusByReferenceIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).GetWithdrawalsRequestStatusByReferenceIds(ctx, req.(*GetWithdrawalsRequestStatusByReferenceIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_GetChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).GetChannel(ctx, req.(*GetChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGuardService_AddTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGuardServiceServer).AddTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGuardService_AddTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGuardServiceServer).AddTags(ctx, req.(*AddTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeGuardService_ServiceDesc is the grpc.ServiceDesc for NodeGuardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeGuardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodeguard.NodeGuardService",
	HandlerType: (*NodeGuardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLiquidityRules",
			Handler:    _NodeGuardService_GetLiquidityRules_Handler,
		},
		{
			MethodName: "GetNewWalletAddress",
			Handler:    _NodeGuardService_GetNewWalletAddress_Handler,
		},
		{
			MethodName: "RequestWithdrawal",
			Handler:    _NodeGuardService_RequestWithdrawal_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _NodeGuardService_AddNode_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _NodeGuardService_GetNodes_Handler,
		},
		{
			MethodName: "GetAvailableWallets",
			Handler:    _NodeGuardService_GetAvailableWallets_Handler,
		},
		{
			MethodName: "GetWalletBalance",
			Handler:    _NodeGuardService_GetWalletBalance_Handler,
		},
		{
			MethodName: "OpenChannel",
			Handler:    _NodeGuardService_OpenChannel_Handler,
		},
		{
			MethodName: "CloseChannel",
			Handler:    _NodeGuardService_CloseChannel_Handler,
		},
		{
			MethodName: "GetChannelOperationRequest",
			Handler:    _NodeGuardService_GetChannelOperationRequest_Handler,
		},
		{
			MethodName: "AddLiquidityRule",
			Handler:    _NodeGuardService_AddLiquidityRule_Handler,
		},
		{
			MethodName: "GetAvailableUtxos",
			Handler:    _NodeGuardService_GetAvailableUtxos_Handler,
		},
		{
			MethodName: "GetUtxos",
			Handler:    _NodeGuardService_GetUtxos_Handler,
		},
		{
			MethodName: "GetWithdrawalsRequestStatus",
			Handler:    _NodeGuardService_GetWithdrawalsRequestStatus_Handler,
		},
		{
			MethodName: "GetWithdrawalsRequestStatusByReferenceIds",
			Handler:    _NodeGuardService_GetWithdrawalsRequestStatusByReferenceIds_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _NodeGuardService_GetChannel_Handler,
		},
		{
			MethodName: "AddTags",
			Handler:    _NodeGuardService_AddTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodeguard.proto",
}
